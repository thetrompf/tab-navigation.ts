{"version":3,"sources":["webpack:///./src/FieldNavigation.ts","webpack:///./src/components/Field.tsx","webpack:///./src/components/Field.mdx","webpack:///./src/components/Focuser.tsx"],"names":["__webpack_require__","d","__webpack_exports__","createNavigationHandler","originUp","focusOrigin","originDown","originLeft","originRight","originPrev","originNext","focusDown","fieldMap","getTabRegistry","x","y","maxX","maxY","origin","tabRegistry","nextOverflow","yCandidate","Math","min","xCandidate","nextField","focus","focusLeft","prevOverflow","max","focusUp","focusRight","navigationMap","tabDirectionAxis","arguments","length","undefined","fetcher","current","focusKey","navigationKey","modifierKeys","altKey","ctrlKey","metaKey","shiftKey","coordinates","findFieldCoordinates","displayName","__docgenInfo","description","props","STORYBOOK_REACT_CLASSES","docgenInfo","name","path","__react_docgen_typescript_loader_error","FieldWithTabRegistry","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","refContainer","refFocuser","clickOutside","e","state","isEditing","submitOnClickOutside","contains","target","onSubmit","stopEditing","onBlur","stopPropagation","submitOnBlur","onClick","preventDefault","startEditing","onContainerClick","onEnter","onEscape","focusParent","onFieldKeyDown","disabled","modifier","key","onLabelClick","onSpace","setContainerRef","ref","setFocuserRef","setState","onEditStart","preventFocus","onEditStop","React","Component","document","addEventListener","nextProps","removeEventListener","opts","errorMessage","react_default","a","createElement","className","Focuser","Object","assign","label","spreadControlProps","onKeyDown","renderEditor","renderErrorMessage","defaultProps","FieldWithForwardRef","renderChildren","_this2$props","_this2","forwardedRef","_objectWithoutProperties","Field_FieldWithTabRegistry","NavigationContext","Consumer","children","Field","forwardRef","Field_FieldWithForwardRef","MDXContent","Field_classCallCheck","Field_possibleConstructorReturn","Field_getPrototypeOf","layout","_this$props","components","Field_objectWithoutProperties","dist","id","parentName","index_m","__codesandbox","__position","__code","__scope","useCallback","useMemo","useReducer","useState","TabRegistry","autoFocus","_useState2","_slicedToArray","registryFetcher","onArrowKeys","Provider","value","_useReducer2","oldState","newState","_objectSpread","editorValue","onChange","submittedOn","test","editor","spellCheck","type","of","emptyChangeHandler","styles","border","display","float","fontSize","height","lineHeight","margin","outline","padding","width","FocuserWithTabRegistry","shouldPrevent","onNavigationKeys","onDelete","onPlus","onMinus","onQuestionMark","onArrowUp","onArrowDown","onArrowLeft","onArrowRight","focusPrev","focusNext","onFocus","add","has","delete","prevProps","react__WEBPACK_IMPORTED_MODULE_0___default","autoComplete","style","tabIndex","FocuserWithForwardRef","_NavigationContext__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"static/js/components-field.e0e2b7f8.js","sourcesContent":["import { ModifierKeys, NavigationKey, NavigationKeyHandler } from './components/Focuser';\nimport { FocuserOptions, TabRegistry } from './TabRegistry';\n\ntype Maybe<T> = T | null;\n\nexport type NavigationMap =\n    | [Maybe<string>][]\n    | [Maybe<string>, Maybe<string>][]\n    | [Maybe<string>, Maybe<string>, Maybe<string>][]\n    | [Maybe<string>, Maybe<string>, Maybe<string>, Maybe<string>][]\n    | [Maybe<string>, Maybe<string>, Maybe<string>, Maybe<string>, Maybe<string>][];\n\ntype TabRegistryFetcher = () => TabRegistry<string> | null;\n\nconst originUp: FocuserOptions = {\n    focusOrigin: 'up',\n};\n\nconst originDown: FocuserOptions = {\n    focusOrigin: 'down',\n};\n\nconst originLeft: FocuserOptions = {\n    focusOrigin: 'left',\n};\n\nconst originRight: FocuserOptions = {\n    focusOrigin: 'right',\n};\n\nconst originPrev: FocuserOptions = {\n    focusOrigin: 'prev',\n};\n\nconst originNext: FocuserOptions = {\n    focusOrigin: 'next',\n};\n\nfunction findFieldCoordinates(\n    fieldMap: NavigationMap,\n    focusKey: string,\n    maxX: number,\n    maxY: number,\n): [number, number] | null {\n    for (let y = 0; y <= maxY; y++) {\n        for (let x = 0; x <= maxX; x++) {\n            if (focusKey === fieldMap[y][x]) {\n                return [x, y];\n            }\n        }\n    }\n    return null;\n}\n\nfunction focusDown(\n    fieldMap: NavigationMap,\n    getTabRegistry: TabRegistryFetcher,\n    x: number,\n    y: number,\n    maxX: number,\n    maxY: number,\n    origin: FocuserOptions,\n): boolean {\n    const tabRegistry = getTabRegistry();\n    const nextOverflow = y === maxY && origin === originPrev;\n\n    if (tabRegistry == null || (!nextOverflow && y === maxY)) {\n        return false;\n    }\n\n    const yCandidate = nextOverflow && x !== maxX ? 0 : Math.min(maxY, y + 1);\n    const xCandidate = nextOverflow ? Math.min(maxX, x + 1) : x;\n    const nextField = fieldMap[yCandidate][xCandidate];\n\n    return (\n        (nextField != null && tabRegistry.focus(nextField, origin)) ||\n        focusDown(fieldMap, getTabRegistry, xCandidate, yCandidate, maxX, maxY, origin)\n    );\n}\n\nfunction focusLeft(\n    fieldMap: NavigationMap,\n    getTabRegistry: TabRegistryFetcher,\n    x: number,\n    y: number,\n    maxX: number,\n    maxY: number,\n    origin: FocuserOptions,\n): boolean {\n    const tabRegistry = getTabRegistry();\n    const prevOverflow = x === 0 && origin === originNext;\n\n    if (tabRegistry == null || (!prevOverflow && x === 0)) {\n        return false;\n    }\n\n    const xCandidate = prevOverflow && y !== 0 ? maxX : Math.max(0, x - 1);\n    const yCandidate = prevOverflow ? Math.max(0, y - 1) : y;\n    const nextField = fieldMap[yCandidate][xCandidate];\n\n    return (\n        (nextField != null && tabRegistry.focus(nextField, origin)) ||\n        focusUp(fieldMap, getTabRegistry, xCandidate, yCandidate, maxX, maxY, origin) ||\n        focusDown(fieldMap, getTabRegistry, xCandidate, yCandidate, maxX, maxY, origin) ||\n        focusLeft(fieldMap, getTabRegistry, xCandidate, yCandidate, maxX, maxY, origin)\n    );\n}\n\nfunction focusRight(\n    fieldMap: NavigationMap,\n    getTabRegistry: TabRegistryFetcher,\n    x: number,\n    y: number,\n    maxX: number,\n    maxY: number,\n    origin: FocuserOptions,\n): boolean {\n    const tabRegistry = getTabRegistry();\n    const nextOverflow = x === maxX && origin === originPrev;\n\n    if (tabRegistry == null || (!nextOverflow && x === maxX)) {\n        return false;\n    }\n\n    const xCandidate = nextOverflow && y !== maxY ? 0 : Math.min(maxX, x + 1);\n    const yCandidate = nextOverflow ? Math.min(maxY, y + 1) : y;\n    const nextField = fieldMap[yCandidate][xCandidate];\n\n    return (\n        (nextField != null && tabRegistry.focus(nextField, origin)) ||\n        focusUp(fieldMap, getTabRegistry, xCandidate, yCandidate, maxX, maxY, origin) ||\n        focusDown(fieldMap, getTabRegistry, xCandidate, yCandidate, maxX, maxY, origin) ||\n        focusRight(fieldMap, getTabRegistry, xCandidate, yCandidate, maxX, maxY, origin)\n    );\n}\n\nfunction focusUp(\n    fieldMap: NavigationMap,\n    getTabRegistry: TabRegistryFetcher,\n    x: number,\n    y: number,\n    maxX: number,\n    maxY: number,\n    origin: FocuserOptions,\n): boolean {\n    const tabRegistry = getTabRegistry();\n    const prevOverflow = y === 0 && origin === originNext;\n\n    if (tabRegistry == null || (!prevOverflow && y === 0)) {\n        return false;\n    }\n\n    const yCandidate = prevOverflow && x !== 0 ? maxY : Math.max(0, y - 1);\n    const xCandidate = prevOverflow ? Math.max(0, x - 1) : x;\n    const nextField = fieldMap[yCandidate][xCandidate];\n\n    return (\n        (nextField != null && tabRegistry.focus(nextField, origin)) ||\n        focusUp(fieldMap, getTabRegistry, xCandidate, yCandidate, maxX, maxY, origin)\n    );\n}\n\n/**\n * Create a keyboard event handler from map of focusable elements\n * you can pass to the `Focuser` to alter the \"default\" behavior of\n * tabs direction to support multiple column layouts, and\n * adds arrow key navigation.\n */\nexport function createNavigationHandler(\n    navigationMap: NavigationMap,\n    getTabRegistry: TabRegistryFetcher | React.RefObject<TabRegistry | null>,\n    tabDirectionAxis: 'x' | 'y' = 'x',\n): NavigationKeyHandler {\n    const maxY = navigationMap.length - 1;\n    const maxX = navigationMap[0].length - 1;\n\n    const fetcher = typeof getTabRegistry === 'function' ? getTabRegistry : () => getTabRegistry.current;\n\n    return (focusKey: string, navigationKey: NavigationKey, modifierKeys: ModifierKeys) => {\n        if (\n            modifierKeys.altKey ||\n            modifierKeys.ctrlKey ||\n            modifierKeys.metaKey ||\n            (navigationKey !== 'Tab' && modifierKeys.shiftKey)\n        ) {\n            return; // don't act on modifier keys except when tabbing.\n        }\n\n        const coordinates = findFieldCoordinates(navigationMap, focusKey, maxX, maxY);\n        if (coordinates == null) {\n            return;\n        }\n\n        const x = coordinates[0];\n        const y = coordinates[1];\n\n        switch (navigationKey) {\n            case 'ArrowUp':\n                return focusUp(navigationMap, fetcher, x, y, maxX, maxY, originDown);\n            case 'ArrowDown':\n                return focusDown(navigationMap, fetcher, x, y, maxX, maxY, originUp);\n            case 'ArrowLeft':\n                return focusLeft(navigationMap, fetcher, x, y, maxX, maxY, originRight);\n            case 'ArrowRight':\n                return focusRight(navigationMap, fetcher, x, y, maxX, maxY, originLeft);\n            case 'Tab':\n                if (modifierKeys.shiftKey) {\n                    return tabDirectionAxis === 'y'\n                        ? focusUp(navigationMap, fetcher, x, y, maxX, maxY, originNext)\n                        : focusLeft(navigationMap, fetcher, x, y, maxX, maxY, originNext);\n                } else {\n                    return tabDirectionAxis === 'y'\n                        ? focusDown(navigationMap, fetcher, x, y, maxX, maxY, originPrev)\n                        : focusRight(navigationMap, fetcher, x, y, maxX, maxY, originPrev);\n                }\n            default:\n                return false;\n        }\n    };\n}\ntry {\n    // @ts-ignore\n    createNavigationHandler.displayName = \"createNavigationHandler\";\n    // @ts-ignore\n    createNavigationHandler.__docgenInfo = { \"description\": \"Create a keyboard event handler from map of focusable elements\\nyou can pass to the `Focuser` to alter the \\\"default\\\" behavior of\\ntabs direction to support multiple column layouts, and\\nadds arrow key navigation.\", \"displayName\": \"createNavigationHandler\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/FieldNavigation.ts#createNavigationHandler\"] = { docgenInfo: createNavigationHandler.__docgenInfo, name: \"createNavigationHandler\", path: \"src/FieldNavigation.ts#createNavigationHandler\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react';\nimport { FocuserOptions, TabRegistry } from '../TabRegistry';\nimport { spreadControlProps } from '../util';\nimport { ArrowKeyHandler, ControlProps, Focuser, NavigationKeyHandler } from './Focuser';\nimport { NavigationContext } from './NavigationContext';\n\nexport type SubmitHandler = (\n    stopEditing: (preventFocus?: boolean) => void,\n    submittedOn: 'blur' | 'click-outside' | 'enter-key',\n) => void;\n\n/**\n * Render prop responsible for rendering the editor / interactive part\n * when activating the field (`isEditing`).\n */\nexport type EditorRenderer = (isEditing: boolean, stopEditing: () => void) => JSX.Element | null | false;\n\n/**\n * Handler when entering editor mode / activating the field.\n */\nexport type EditStartHandler = (stopEditing: () => void) => void;\n\nexport interface Props extends ControlProps {\n    /**\n     * Set the classname of the container element,\n     * this makes the component compatible with most css-in-js libraries\n     * like styled-components, glamor and emotion etc.\n     */\n    className?: string;\n\n    /**\n     * Whether or not the field is disabled; cannot be focused, start editing,\n     * no navigation key events will be triggered/propagated.\n     */\n    disabled?: boolean;\n\n    /**\n     * If provided, the field get the className .has-error\n     * added, and render the error message adjecent to editor.\n     */\n    errorMessage?: string | null;\n\n    /**\n     * The label of the editor, must be unique amoung siblings\n     * withing a TabBoundary/TabRegistry.\n     */\n    label: string;\n\n    /**\n     * Called when the underlying focuser has focus and\n     * the user presses down any arrow key of the keyboard.\n     * @deprecated use [onNavigationKeys].\n     */\n    onArrowKeys?: ArrowKeyHandler;\n\n    /**\n     * Called when the underlying focuser has focus\n     * and the user presses the delete key of the keyboard.\n     */\n    onDelete?: () => void;\n\n    /**\n     * Called just before the fields switches to edit mode.\n     * This is a great place to set internal state of any input field\n     * before going into edit mode.\n     */\n    onEditStart?: EditStartHandler;\n\n    /**\n     * Called just after the stopEditing is called, and switches back\n     * to read mode.\n     * This is a great place to clean up after edit more, or reset any state\n     * before going back into read mode.\n     */\n    onEditStop?: () => void;\n\n    /**\n     * The preferred handler to use for handling all keyboard navigation in read mode.\n     * Navigation in edit mode should be implemented in the editor.\n     */\n    onNavigationKeys?: NavigationKeyHandler;\n\n    /**\n     * Called when submitting the field. The submit handler is responsible\n     * for invoking stop editing, and put the field back into read mode.\n     * The handler gets passed info about how the field is submitted.\n     */\n    onSubmit: SubmitHandler;\n\n    /**\n     * Render prop responsible for rendering the actual editor both in read and edit mode.\n     */\n    renderEditor: EditorRenderer;\n\n    /**\n     * Whether or not a blur event caught on the inside the field component\n     * should trigger submit.\n     */\n    submitOnBlur?: boolean;\n\n    /**\n     * Whether or not click-outside of the field and/or its descendant components\n     * should trigger submit.\n     */\n    submitOnClickOutside?: boolean;\n}\n\ninterface State {\n    isEditing: boolean;\n}\n\ntype PropsTabRegistry = Props & { tabRegistry: TabRegistry | null };\n\nclass FieldWithTabRegistry extends React.Component<PropsTabRegistry, State> {\n    public static defaultProps = {\n        disabled: false,\n        submitOnBlur: false,\n        submitOnClickOutside: false,\n    };\n    public static displayName = 'Field';\n\n    private refContainer: HTMLDivElement | null = null;\n    private refFocuser: Focuser | null = null;\n\n    public constructor(props: PropsTabRegistry) {\n        super(props);\n        this.state = {\n            isEditing: false,\n        };\n    }\n\n    public componentDidMount() {\n        document.addEventListener('click', this.clickOutside, false);\n    }\n\n    public componentWillReceiveProps(nextProps: PropsTabRegistry) {\n        if (!this.props.disabled && nextProps.disabled) {\n            this.stopEditing(true);\n        }\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener('click', this.clickOutside, false);\n    }\n\n    private clickOutside = (e: MouseEvent) => {\n        if (this.state.isEditing && this.props.submitOnClickOutside) {\n            if (this.refContainer != null && !this.refContainer.contains(e.target as HTMLElement)) {\n                this.props.onSubmit(this.stopEditing, 'click-outside');\n            }\n        }\n    };\n\n    private focus(opts: FocuserOptions) {\n        if (this.props.disabled || this.refFocuser == null) {\n            return false;\n        }\n        return this.refFocuser.focus(opts);\n    }\n\n    private onBlur = (e: React.FocusEvent<HTMLDivElement>) => {\n        // don't prevent default on blur event\n        // or else the field actually won't get blurred.\n        e.stopPropagation();\n\n        if (!this.state.isEditing || !this.props.submitOnBlur) {\n            return;\n        }\n\n        this.props.onSubmit(this.stopEditing, 'blur');\n    };\n\n    private onClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.startEditing();\n    };\n\n    private onContainerClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.stopPropagation();\n        e.preventDefault();\n    };\n\n    private onEnter = (e: React.KeyboardEvent<HTMLInputElement>, focusKey: string) => {\n        this.startEditing();\n        if (this.props.onEnter != null) {\n            this.props.onEnter(e, focusKey);\n        }\n    };\n\n    private onEscape = (e: React.KeyboardEvent<HTMLInputElement>, focusKey: string) => {\n        if (this.props.onEscape != null) {\n            this.props.onEscape(e, focusKey);\n        }\n        if (this.state.isEditing) {\n            this.stopEditing();\n        } else {\n            if (this.props.tabRegistry != null) {\n                this.props.tabRegistry.focusParent();\n            }\n        }\n    };\n\n    private onFieldKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (this.props.disabled) {\n            return;\n        }\n\n        const modifier = e.shiftKey || e.metaKey || e.ctrlKey || e.altKey;\n        if (e.key === 'Enter' && !modifier) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.props.onSubmit(this.stopEditing, 'enter-key');\n        } else if (e.key === 'Escape' && !modifier) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.stopEditing();\n        }\n    };\n\n    private onLabelClick = (e: React.MouseEvent<HTMLLabelElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.focus({\n            focusOrigin: 'mouse',\n        });\n    };\n\n    private onSpace = (e: React.KeyboardEvent<HTMLInputElement>, focusKey: string) => {\n        this.startEditing();\n        if (this.props.onSpace != null) {\n            this.props.onSpace(e, focusKey);\n        }\n    };\n\n    private renderErrorMessage() {\n        if (this.props.errorMessage == null) {\n            return null;\n        }\n        return <div className=\"error-message\">{this.props.errorMessage}</div>;\n    }\n\n    private setContainerRef = (ref: HTMLDivElement | null) => {\n        this.refContainer = ref;\n    };\n\n    private setFocuserRef = (ref: Focuser | null) => {\n        this.refFocuser = ref;\n    };\n\n    private startEditing = () => {\n        if (this.props.disabled || this.state.isEditing) {\n            return;\n        }\n\n        this.setState({\n            isEditing: true,\n        });\n\n        if (this.props.onEditStart != null) {\n            this.props.onEditStart(this.stopEditing);\n        }\n    };\n\n    private stopEditing = (preventFocus?: boolean) => {\n        if (!this.state.isEditing) {\n            return;\n        }\n\n        this.setState(\n            {\n                isEditing: false,\n            },\n            () => {\n                if (preventFocus) {\n                    return;\n                }\n                this.focus({\n                    focusOrigin: 'user',\n                });\n            },\n        );\n\n        if (this.props.onEditStop != null) {\n            this.props.onEditStop();\n        }\n    };\n\n    public render() {\n        return (\n            <div\n                className={this.props.className || 'field-container'}\n                onClick={this.onContainerClick}\n                ref={this.setContainerRef}\n            >\n                <Focuser\n                    focusKey={this.props.label}\n                    key=\"focuser\"\n                    {...spreadControlProps(this.props)}\n                    onEnter={this.onEnter}\n                    onEscape={this.onEscape}\n                    onSpace={this.onSpace}\n                    ref={this.setFocuserRef}\n                />\n                <div\n                    className={'field' + (this.props.errorMessage == null ? '' : ' has-error')}\n                    onBlur={this.onBlur}\n                    onClick={this.onClick}\n                    onKeyDown={this.onFieldKeyDown}\n                >\n                    <label onClick={this.onLabelClick}>{this.props.label}</label>\n                    {this.props.renderEditor(this.state.isEditing, this.stopEditing)}\n                    {this.renderErrorMessage()}\n                </div>\n            </div>\n        );\n    }\n}\n\ntype PropsWithForwardRef = Props & { forwardedRef?: React.Ref<FieldWithTabRegistry> };\nclass FieldWithForwardRef extends React.Component<PropsWithForwardRef> {\n    public static displayName = 'TabRegistry(Field)';\n\n    private renderChildren = (tabRegistry: TabRegistry | null) => {\n        const { forwardedRef, ...props } = this.props;\n        return <FieldWithTabRegistry {...props} ref={forwardedRef} tabRegistry={tabRegistry} />;\n    };\n\n    public render() {\n        return <NavigationContext.Consumer children={this.renderChildren} />;\n    }\n}\n\n/**\n * Helper for creating UI which have read / edit modes\n * and helps making \"fields\" which can be navigated to even\n * when the UI is not built upon elements which\n * natively can be have focus.\n *\n * Focus handling, and switching between read/edit mode\n * and submitting values to persistence or cancel edit of value\n * is made easier.\n */\nexport type Field = FieldWithTabRegistry;\nexport const Field = React.forwardRef<FieldWithTabRegistry, Props>((props, ref) => (\n    <FieldWithForwardRef {...props} forwardedRef={ref} />\n)) as React.ComponentClass<Props> &\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<Props> & React.RefAttributes<FieldWithTabRegistry>>;\ntry {\n    // @ts-ignore\n    Field.displayName = \"Field\";\n    // @ts-ignore\n    Field.__docgenInfo = { \"description\": \"Helper for creating UI which have read / edit modes\\nand helps making \\\"fields\\\" which can be navigated to even\\nwhen the UI is not built upon elements which\\nnatively can be have focus.\\n\\nFocus handling, and switching between read/edit mode\\nand submitting values to persistence or cancel edit of value\\nis made easier.\", \"displayName\": \"Field\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Field.tsx#Field\"] = { docgenInfo: Field.__docgenInfo, name: \"Field\", path: \"src/components/Field.tsx#Field\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import '../docs/styles.less';\nimport { Playground, PropsTable } from 'docz';\nimport { useCallback, useMemo, useReducer, useState } from 'react';\nimport { Field } from './Field';\nimport { Focuser } from './Focuser';\nimport { NavigationContext } from './NavigationContext';\nimport { TabRegistry } from '../TabRegistry';\nimport { createNavigationHandler } from '../FieldNavigation';\n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"field\"}}>{`Field`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This component helps creating field-by-field editing components,\nso components that have life-cycles that looks something like this:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`read mode`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`user activates edit mode`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`user changes a value`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`user submits/persists the new value`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`read mode`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`And you would like to be able to focus the component in read mode,\nnavigate to next field or focusable component, without having an editable field.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"basic-usage\"}}>{`Basic usage`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'() => {\\n  const onSubmit = stopEditing => stopEditing()\\n  const renderEditor = isEditing => {\\n    return isEditing ? (\\n      <div className=\\\"editor active\\\">\\n        Edit\\n        <Focuser autoFocus={true} focusKey=\\\"field-focuser\\\" />\\n      </div>\\n    ) : (\\n      <div className=\\\"editor\\\">Read</div>\\n    )\\n  }\\n  return (\\n    <Field label=\\\"Field\\\" onSubmit={onSubmit} renderEditor={renderEditor} />\\n  )\\n}'} __scope={{props: this ? this.props : props,useCallback,useMemo,useReducer,useState,Field,Focuser,NavigationContext,TabRegistry,createNavigationHandler}}>\n    {() => {\n        const onSubmit = stopEditing => stopEditing();\n        const renderEditor = isEditing => {\n            return isEditing ? (\n                <div className=\"editor active\">\n                    Edit\n                    <Focuser autoFocus={true} focusKey=\"field-focuser\" />\n                </div>\n            ) : (\n                <div className=\"editor\">Read</div>\n            );\n        };\n        return <Field label=\"Field\" onSubmit={onSubmit} renderEditor={renderEditor} />;\n    }}\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"tab-navigation-between-fields\"}}>{`Tab navigation between fields`}</MDXTag>\n<Playground __codesandbox={``} __position={1} __code={'() => {\\n  const [tabRegistry, setTabRegistry] = useState(() => new TabRegistry())\\n  const registryFetcher = useCallback(() => tabRegistry, [])\\n  const onArrowKeys = useMemo(\\n    () =>\\n      createNavigationHandler(\\n        [[\\'Field1\\', \\'Field2\\'], [\\'Field3\\', \\'Field4\\']],\\n        registryFetcher,\\n      ),\\n    [],\\n  )\\n  const onSubmit = stopEditing => stopEditing()\\n  const renderEditor = () => <div className=\\\"editor\\\">Value</div>\\n  return (\\n    <NavigationContext.Provider value={tabRegistry}>\\n      <div className=\\\"flex-container\\\">\\n        <Field\\n          label=\\\"Field1\\\"\\n          onArrowKeys={onArrowKeys}\\n          onSubmit={onSubmit}\\n          renderEditor={renderEditor}\\n        />\\n        <Field\\n          label=\\\"Field2\\\"\\n          onArrowKeys={onArrowKeys}\\n          onSubmit={onSubmit}\\n          renderEditor={renderEditor}\\n        />\\n      </div>\\n      <div className=\\\"flex-container\\\">\\n        <Field\\n          label=\\\"Field3\\\"\\n          onArrowKeys={onArrowKeys}\\n          onSubmit={onSubmit}\\n          renderEditor={renderEditor}\\n        />\\n        <Field\\n          label=\\\"Field4\\\"\\n          onArrowKeys={onArrowKeys}\\n          onSubmit={onSubmit}\\n          renderEditor={renderEditor}\\n        />\\n      </div>\\n    </NavigationContext.Provider>\\n  )\\n}'} __scope={{props: this ? this.props : props,useCallback,useMemo,useReducer,useState,Field,Focuser,NavigationContext,TabRegistry,createNavigationHandler}}>\n    {() => {\n        const [tabRegistry, setTabRegistry] = useState(() => new TabRegistry);\n        const registryFetcher = useCallback(() => tabRegistry, []);\n        const onArrowKeys = useMemo(() => createNavigationHandler([\n            ['Field1','Field2'],\n            ['Field3','Field4'],\n        ], registryFetcher), []);\n        const onSubmit = stopEditing => stopEditing();\n        const renderEditor = () => <div className=\"editor\">Value</div>;\n        return (\n            <NavigationContext.Provider value={tabRegistry}>\n                <div className=\"flex-container\">\n                    <Field label=\"Field1\" onArrowKeys={onArrowKeys} onSubmit={onSubmit} renderEditor={renderEditor} />\n                    <Field label=\"Field2\" onArrowKeys={onArrowKeys} onSubmit={onSubmit} renderEditor={renderEditor} />\n                </div>\n                <div className=\"flex-container\">\n                    <Field label=\"Field3\" onArrowKeys={onArrowKeys} onSubmit={onSubmit} renderEditor={renderEditor} />\n                    <Field label=\"Field4\" onArrowKeys={onArrowKeys} onSubmit={onSubmit} renderEditor={renderEditor} />\n                </div>\n            </NavigationContext.Provider>\n        );\n    }}\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"setting-up-custom-field\"}}>{`Setting up custom field`}</MDXTag>\n<Playground __codesandbox={``} __position={2} __code={'() => {\\n  const [state, setState] = useReducer(\\n    (oldState, newState) => ({\\n      ...oldState,\\n      ...newState,\\n    }),\\n    {\\n      editorValue: \\'\\',\\n      errorMessage: null,\\n      value: \\'user@domain.tld\\',\\n    },\\n  )\\n  const onEditStart = useCallback(\\n    () => setState({ editorValue: state.value }),\\n    [state.value],\\n  )\\n  const onEditStop = useCallback(() => setState({ errorMessage: null }), [])\\n  const onChange = useCallback(\\n    e => setState({ editorValue: e.target.value }),\\n    [],\\n  )\\n  const onSubmit = useCallback(\\n    (stopEditing, submittedOn) => {\\n      if (!/^.+@.+\\\\\\\\..+$/.test(state.editorValue)) {\\n        setState({ errorMessage: \\'Invalid email address\\' })\\n        return\\n      }\\n      setState({ value: state.editorValue })\\n      stopEditing()\\n    },\\n    [state.editorValue],\\n  )\\n  const renderEditor = useCallback(\\n    isEditing => {\\n      const editor = isEditing ? (\\n        <input\\n          autoFocus={true}\\n          onChange={onChange}\\n          spellCheck={false}\\n          type=\\\"email\\\"\\n          value={state.editorValue}\\n        />\\n      ) : (\\n        <div className=\\\"value\\\">{state.value}</div>\\n      )\\n      return (\\n        <div className={\\'editor\\' + (isEditing ? \\' active\\' : \\'\\')}>\\n          {editor}\\n        </div>\\n      )\\n    },\\n    [state.value, state.editorValue],\\n  )\\n  return (\\n    <Field\\n      errorMessage={state.errorMessage}\\n      label=\\\"E-mail\\\"\\n      onSubmit={onSubmit}\\n      onEditStart={onEditStart}\\n      onEditStop={onEditStop}\\n      renderEditor={renderEditor}\\n      submitOnBlur={true}\\n    />\\n  )\\n}'} __scope={{props: this ? this.props : props,useCallback,useMemo,useReducer,useState,Field,Focuser,NavigationContext,TabRegistry,createNavigationHandler}}>\n    {() => {\n        const [state, setState] = useReducer((oldState, newState) => ({\n            ...oldState,\n            ...newState,\n        }), {\n            editorValue: '',\n            errorMessage: null,\n            value: 'user@domain.tld',\n        });\n        const onEditStart = useCallback(() => setState({editorValue: state.value}), [state.value]);\n        const onEditStop = useCallback(() => setState({errorMessage: null}), []);\n        const onChange = useCallback(e => setState({editorValue: e.target.value}), []);\n        const onSubmit = useCallback((stopEditing, submittedOn) => {\n            if (!/^.+@.+\\\\..+$/.test(state.editorValue)) {\n                setState({errorMessage: 'Invalid email address'});\n                return;\n            }\n            setState({value: state.editorValue});\n            stopEditing();\n        }, [state.editorValue]);\n        const renderEditor = useCallback((isEditing) => {\n            const editor = isEditing ? (\n                <input autoFocus={true} onChange={onChange} spellCheck={false} type=\"email\" value={state.editorValue} />\n            ) : (\n                <div className=\"value\">{state.value}</div>\n            );\n            return <div className={'editor' + (isEditing ? ' active' : '')}>{editor}</div>;\n        }, [state.value, state.editorValue]);\n    return (\n        <Field\n            errorMessage={state.errorMessage}\n            label=\"E-mail\"\n            onSubmit={onSubmit}\n            onEditStart={onEditStart}\n            onEditStop={onEditStop}\n            renderEditor={renderEditor}\n            submitOnBlur={true}\n        />\n    );\n}}\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<PropsTable of={Field} />\n           </MDXTag>\n  }\n}\n  ","import React from 'react';\nimport { FocuserOptions, TabRegistry } from '../TabRegistry';\nimport { NavigationContext } from './NavigationContext';\n\nexport type ArrowKey = 'ArrowUp' | 'ArrowDown' | 'ArrowLeft' | 'ArrowRight';\nexport type NavigationKey =\n    | ArrowKey\n    | 'Tab'\n    | 'Escape'\n    | 'Enter'\n    | 'Delete'\n    | 'Space'\n    | 'Plus'\n    | 'Minus'\n    | 'QuestionMark';\n\nexport interface ModifierKeys {\n    altKey: boolean;\n    ctrlKey: boolean;\n    metaKey: boolean;\n    shiftKey: boolean;\n}\n\nexport type ArrowKeyHandler = (focusKey: string, arrowKey: ArrowKey, modifierKeys: ModifierKeys) => void;\nexport type BlurEventHandler = (e: React.FocusEvent<HTMLInputElement>, focusKey: string) => void;\nexport type FocusEventHandler = (opts: FocuserOptions, focusKey: string) => void;\nexport type KeyboardEventHandler = (e: React.KeyboardEvent<HTMLInputElement>, focusKey: string) => void;\nexport type NavigationKeyHandler = (focusKey: string, navKey: NavigationKey, modifierKyes: ModifierKeys) => void;\n\nconst emptyChangeHandler = () => {\n    return;\n};\n\nexport interface ControlProps {\n    /**\n     * Focus the underlaying input field upon mount.\n     */\n    autoFocus?: boolean;\n\n    /**\n     * Whether or not the focuser is disabled; cannot be focused,\n     * thus will not propagation any events.\n     * A TabBoundary will skip this component, if trying to\n     * focus it via focusNext/focusPrev and friends.\n     */\n    disabled?: boolean;\n\n    /**\n     * Called when the underlying input field has focus and the user,\n     * presses down the down arrow key on the keyboard.\n     */\n    onArrowDown?: KeyboardEventHandler;\n\n    /**\n     * Called when the underlying input field has focus and the\n     * user presses down any arrow key of the keyboard.\n     * @deprecated use [onNavigationKeys].\n     */\n    onArrowKeys?: ArrowKeyHandler;\n\n    /**\n     * Called when the underlying input field has focus and the user,\n     * presses down the left arrow key on the keyboard.\n     */\n    onArrowLeft?: KeyboardEventHandler;\n\n    /**\n     * Called when the underlying input field has focus and the user,\n     * presses down the right arrow key on the keyboard.\n     */\n    onArrowRight?: KeyboardEventHandler;\n\n    /**\n     * Called when the underlying input field has focus and the user,\n     * presses down the up arrow key on the keyboard.\n     */\n    onArrowUp?: KeyboardEventHandler;\n\n    /**\n     * Called when the underlying input loses focus.\n     */\n    onBlur?: BlurEventHandler;\n\n    /**\n     * Called when the underlying input field has focus and the user,\n     * presses down the delete key on the keyboard.\n     */\n    onDelete?: KeyboardEventHandler;\n\n    /**\n     * Called when the underlying input field has focus and the user,\n     * presses down the enter key on the keyboard.\n     */\n    onEnter?: KeyboardEventHandler;\n\n    /**\n     * Called when the underlying input field has focus and the user,\n     * presses down the escape key on the keyboard.\n     */\n    onEscape?: KeyboardEventHandler;\n\n    /**\n     * Called when the underlaying input field gains focus.\n     */\n    onFocus?: FocusEventHandler;\n\n    /**\n     * Called when the underlying input field has focus and the user,\n     * presses down the minus key on the keyboard.\n     */\n    onMinus?: KeyboardEventHandler;\n\n    /**\n     * Called when any of the listed navigation keys are pressed while\n     * the underlying input field has focus.\n     */\n    onNavigationKeys?: NavigationKeyHandler;\n\n    /**\n     * Called when the underlying input field has focus and the user,\n     * presses down the plus key on the keyboard.\n     */\n    onPlus?: KeyboardEventHandler;\n\n    /**\n     * Called when the underlying input field has focus and the user,\n     * presses down the question mark key on the keyboard.\n     */\n    onQuestionMark?: KeyboardEventHandler;\n\n    /**\n     * Called when the underlying input field has focus and the user,\n     * presses down the space key on the keyboard.\n     */\n    onSpace?: KeyboardEventHandler;\n}\n\nexport interface Props extends ControlProps {\n    /**\n     * Set the classname of the underlaying input field,\n     * this makes the component compatible with most css-in-js libraries\n     * like styled-components, glamor and emotion etc.\n     */\n    className?: string;\n\n    /**\n     * Unique identifier among siblings within a TabBoundary or TabRegistry.\n     */\n    focusKey: string;\n}\n\ninterface State {}\n\nconst styles: React.CSSProperties = {\n    border: 'none',\n    display: 'inline',\n    float: 'left',\n    fontSize: 0,\n    height: 0,\n    lineHeight: 0,\n    margin: 0,\n    outline: 'none',\n    padding: 0,\n    width: 0,\n};\n\ntype PropsWithTabRegistry = Props & { tabRegistry: TabRegistry | null };\n\nclass FocuserWithTabRegistry extends React.Component<PropsWithTabRegistry, State> {\n    public static defaultProps = {\n        autoFocus: false,\n        disabled: false,\n    };\n    public static displayName = 'Focuser';\n\n    private refFocuser: HTMLInputElement | null = null;\n\n    public componentDidMount() {\n        if (this.props.tabRegistry != null) {\n            this.props.tabRegistry.add(this.props.focusKey, this.focus);\n        }\n    }\n\n    public componentWillReceiveProps(nextProps: PropsWithTabRegistry) {\n        if (\n            this.props.focusKey !== nextProps.focusKey &&\n            this.props.tabRegistry != null &&\n            this.props.tabRegistry.has(this.props.focusKey)\n        ) {\n            this.props.tabRegistry.delete(this.props.focusKey);\n        }\n    }\n\n    public componentDidUpdate(prevProps: PropsWithTabRegistry) {\n        if (this.props.focusKey !== prevProps.focusKey && this.props.tabRegistry != null) {\n            this.props.tabRegistry.add(this.props.focusKey, this.focus);\n        }\n    }\n\n    public componentWillUnmount() {\n        if (this.props.tabRegistry != null) {\n            this.props.tabRegistry.delete(this.props.focusKey);\n        }\n    }\n\n    private onBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n        if (this.props.onBlur != null) {\n            this.props.onBlur(e, this.props.focusKey);\n        }\n    };\n\n    private onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (this.props.disabled) {\n            return;\n        }\n\n        let shouldPrevent = false;\n        const modifierKeys: ModifierKeys = {\n            altKey: e.altKey,\n            ctrlKey: e.ctrlKey,\n            metaKey: e.metaKey,\n            shiftKey: e.shiftKey,\n        };\n\n        if (e.key === 'Enter') {\n            if (this.props.onEnter != null) {\n                shouldPrevent = true;\n                this.props.onEnter(e, this.props.focusKey);\n            }\n            if (this.props.onNavigationKeys != null) {\n                shouldPrevent = true;\n                this.props.onNavigationKeys(this.props.focusKey, 'Enter', modifierKeys);\n            }\n        } else if (e.key === ' ') {\n            if (this.props.onSpace != null) {\n                shouldPrevent = true;\n                this.props.onSpace(e, this.props.focusKey);\n            }\n            if (this.props.onNavigationKeys != null) {\n                shouldPrevent = true;\n                this.props.onNavigationKeys(this.props.focusKey, 'Space', modifierKeys);\n            }\n        } else if (e.key === 'Escape') {\n            if (this.props.onEscape != null) {\n                shouldPrevent = true;\n                this.props.onEscape(e, this.props.focusKey);\n            }\n            if (this.props.onNavigationKeys != null) {\n                shouldPrevent = true;\n                this.props.onNavigationKeys(this.props.focusKey, 'Escape', modifierKeys);\n            }\n        } else if (e.key === 'Delete') {\n            if (this.props.onDelete != null) {\n                shouldPrevent = true;\n                this.props.onDelete(e, this.props.focusKey);\n            }\n            if (this.props.onNavigationKeys != null) {\n                shouldPrevent = true;\n                this.props.onNavigationKeys(this.props.focusKey, 'Delete', modifierKeys);\n            }\n        } else if (e.key === '+') {\n            if (this.props.onPlus != null) {\n                shouldPrevent = true;\n                this.props.onPlus(e, this.props.focusKey);\n            }\n            if (this.props.onNavigationKeys != null) {\n                shouldPrevent = true;\n                this.props.onNavigationKeys(this.props.focusKey, 'Plus', modifierKeys);\n            }\n        } else if (e.key === '-') {\n            if (this.props.onMinus != null) {\n                shouldPrevent = true;\n                this.props.onMinus(e, this.props.focusKey);\n            }\n            if (this.props.onNavigationKeys != null) {\n                shouldPrevent = true;\n                this.props.onNavigationKeys(this.props.focusKey, 'Minus', modifierKeys);\n            }\n        } else if (e.key === '?') {\n            if (this.props.onQuestionMark != null) {\n                shouldPrevent = true;\n                this.props.onQuestionMark(e, this.props.focusKey);\n            }\n            if (this.props.onNavigationKeys != null) {\n                shouldPrevent = true;\n                this.props.onNavigationKeys(this.props.focusKey, 'QuestionMark', modifierKeys);\n            }\n        } else if (e.key === 'ArrowUp') {\n            if (this.props.onArrowUp != null) {\n                shouldPrevent = true;\n                this.props.onArrowUp(e, this.props.focusKey);\n            }\n            if (this.props.onArrowKeys != null) {\n                shouldPrevent = true;\n                this.props.onArrowKeys(this.props.focusKey, 'ArrowUp', modifierKeys);\n            }\n            if (this.props.onNavigationKeys != null) {\n                shouldPrevent = true;\n                this.props.onNavigationKeys(this.props.focusKey, 'ArrowUp', modifierKeys);\n            }\n        } else if (e.key === 'ArrowDown') {\n            if (this.props.onArrowDown != null) {\n                shouldPrevent = true;\n                this.props.onArrowDown(e, this.props.focusKey);\n            }\n            if (this.props.onArrowKeys != null) {\n                shouldPrevent = true;\n                this.props.onArrowKeys(this.props.focusKey, 'ArrowDown', modifierKeys);\n            }\n            if (this.props.onNavigationKeys != null) {\n                shouldPrevent = true;\n                this.props.onNavigationKeys(this.props.focusKey, 'ArrowDown', modifierKeys);\n            }\n        } else if (e.key === 'ArrowLeft') {\n            if (this.props.onArrowLeft != null) {\n                shouldPrevent = true;\n                this.props.onArrowLeft(e, this.props.focusKey);\n            }\n            if (this.props.onArrowKeys != null) {\n                shouldPrevent = true;\n                this.props.onArrowKeys(this.props.focusKey, 'ArrowLeft', modifierKeys);\n            }\n            if (this.props.onNavigationKeys != null) {\n                shouldPrevent = true;\n                this.props.onNavigationKeys(this.props.focusKey, 'ArrowLeft', modifierKeys);\n            }\n        } else if (e.key === 'ArrowRight') {\n            if (this.props.onArrowRight != null) {\n                shouldPrevent = true;\n                this.props.onArrowRight(e, this.props.focusKey);\n            }\n            if (this.props.onArrowKeys != null) {\n                shouldPrevent = true;\n                this.props.onArrowKeys(this.props.focusKey, 'ArrowRight', modifierKeys);\n            }\n            if (this.props.onNavigationKeys != null) {\n                shouldPrevent = true;\n                this.props.onNavigationKeys(this.props.focusKey, 'ArrowRight', modifierKeys);\n            }\n        } else if (e.key === 'Tab') {\n            if (e.shiftKey) {\n                if (this.props.tabRegistry != null) {\n                    shouldPrevent = true;\n                    this.props.tabRegistry.focusPrev(this.props.focusKey);\n                }\n            } else {\n                if (this.props.tabRegistry != null) {\n                    shouldPrevent = true;\n                    this.props.tabRegistry.focusNext(this.props.focusKey);\n                }\n            }\n            if (this.props.onNavigationKeys != null) {\n                shouldPrevent = true;\n                this.props.onNavigationKeys(this.props.focusKey, 'Tab', modifierKeys);\n            }\n        } else if (!(e.shiftKey || e.altKey || e.ctrlKey || e.metaKey)) {\n            shouldPrevent = true;\n        }\n\n        if (shouldPrevent) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    };\n\n    private setFocuserRef = (ref: HTMLInputElement | null) => {\n        this.refFocuser = ref;\n    };\n\n    public focus = (opts: FocuserOptions) => {\n        if (this.props.disabled || this.refFocuser == null) {\n            return false;\n        }\n        this.refFocuser.focus();\n        if (this.props.onFocus) {\n            this.props.onFocus(opts, this.props.focusKey);\n        }\n        return true;\n    };\n\n    public render() {\n        return (\n            <input\n                autoComplete=\"off\"\n                autoFocus={this.props.autoFocus}\n                className={this.props.className || 'focuser'}\n                disabled={this.props.disabled}\n                key=\"focuser\"\n                name={this.props.focusKey}\n                onBlur={this.onBlur}\n                onChange={emptyChangeHandler}\n                onKeyDown={this.onKeyDown}\n                ref={this.setFocuserRef}\n                style={styles}\n                tabIndex={-1}\n                value=\"\"\n            />\n        );\n    }\n}\n\ntype PropsWithForwardRef = Props & { forwardedRef?: React.Ref<FocuserWithTabRegistry> };\nclass FocuserWithForwardRef extends React.Component<PropsWithForwardRef> {\n    public static displayName = 'TabRegistry(Focuser)';\n\n    private renderChildren = (tabRegistry: TabRegistry | null) => {\n        const { forwardedRef, ...props } = this.props;\n        return <FocuserWithTabRegistry {...props} ref={forwardedRef} tabRegistry={tabRegistry} />;\n    };\n\n    public render() {\n        return <NavigationContext.Consumer children={this.renderChildren} />;\n    }\n}\n\n/**\n * Base component which is the heart of this library, a component that simply can\n * have focus and listen to key strokes. Common navigation handlers are made available\n * to minimize the boilable about designing keyboard interactive interfaces.\n */\nexport type Focuser = FocuserWithTabRegistry;\nexport const Focuser = React.forwardRef<FocuserWithTabRegistry, Props>((props, ref) => (\n    <FocuserWithForwardRef {...props} forwardedRef={ref} />\n)) as React.ComponentClass<Props> &\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<Props> & React.RefAttributes<FocuserWithTabRegistry>>;\ntry {\n    // @ts-ignore\n    Focuser.displayName = \"Focuser\";\n    // @ts-ignore\n    Focuser.__docgenInfo = { \"description\": \"Base component which is the heart of this library, a component that simply can\\nhave focus and listen to key strokes. Common navigation handlers are made available\\nto minimize the boilable about designing keyboard interactive interfaces.\", \"displayName\": \"Focuser\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Focuser.tsx#Focuser\"] = { docgenInfo: Focuser.__docgenInfo, name: \"Focuser\", path: \"src/components/Focuser.tsx#Focuser\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}
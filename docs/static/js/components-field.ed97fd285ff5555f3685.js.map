{"version":3,"sources":["webpack:///./src/components/Field.tsx","webpack:///./src/components/Field.mdx"],"names":["Field","_React$Component","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","refContainer","refFocuser","tabRegistry","clickOutside","e","state","isEditing","submitOnClickOutside","contains","target","onSubmit","stopEditing","onBlur","stopPropagation","submitOnBlur","onClick","preventDefault","startEditing","onContainerClick","onEscape","focusParent","onFieldKeyDown","disabled","modifier","shiftKey","metaKey","ctrlKey","altKey","key","onLabelClick","focus","focusOrigin","renderWithTabRegistry","react","className","ref","setContainerRef","Focuser","focusKey","label","onArrowKeys","onDelete","onEnter","onNavigationKeys","onSpace","setFocuserRef","errorMessage","onKeyDown","renderEditor","renderErrorMessage","setState","onEditStart","preventFocus","onEditStop","_inherits","React","value","document","addEventListener","nextProps","removeEventListener","opts","TabBoundary","Consumer","defaultProps","displayName","__docgenInfo","description","defaultValue","name","required","type","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","MDXContent","Field_classCallCheck","Field_possibleConstructorReturn","Field_getPrototypeOf","layout","Component","_this$props","components","_objectWithoutProperties","react_default","a","createElement","dist","id","parentName","index_m","__codesandbox","__position","__code","__scope","useCallback","useMemo","useReducer","useState","NavigationContext","TabRegistry","createNavigationHandler","Field_Field","autoFocus","_useState2","_slicedToArray","registryFetcher","Provider","_useReducer2","oldState","newState","_objectSpread","editorValue","onChange","submittedOn","test","editor","spellCheck","of"],"mappings":"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","file":"static/js/components-field.04a8708e.js","sourcesContent":["import * as React from 'react';\nimport { FocuserOptions, TabRegistry } from '../TabRegistry';\nimport { ArrowKeyHandler, Focuser, NavigationKeyHandler } from './Focuser';\nimport { NavigationContext } from './TabBoundary';\n\nexport type SubmitHandler = (\n    stopEditing: (preventFocus?: boolean) => void,\n    submittedOn: 'blur' | 'click-outside' | 'enter-key',\n) => void;\nexport type EditorRenderer = (isEditing: boolean, stopEditing: () => void) => JSX.Element | null | false;\nexport type EditStartHandler = (stopEditing: () => void) => void;\n\nexport interface Props {\n    /**\n     * Set the classname of the container element,\n     * this makes the component compatible with most css-in-js libraries\n     * like styled-components, glamor and emotion etc.\n     */\n    className?: string;\n\n    /**\n     * Whether or not the field is disabled; cannot be focused, start editing,\n     * no navigation key events will be triggered/propagated.\n     */\n    disabled?: boolean;\n\n    /**\n     * If provided, the field get the className .has-error\n     * added, and render the error message adjecent to editor.\n     */\n    errorMessage?: string | null;\n\n    /**\n     * The label of the editor, must be unique amoung siblings\n     * withing a TabBoundary/TabRegistry.\n     */\n    label: string;\n\n    /**\n     * Called when the underlying focuser has focus and\n     * the user presses down any arrow key of the keyboard.\n     * @deprecated use [onNavigationKeys].\n     */\n    onArrowKeys?: ArrowKeyHandler;\n\n    /**\n     * Called when the underlying focuser has focus\n     * and the user presses the delete key of the keyboard.\n     */\n    onDelete?: () => void;\n\n    /**\n     * Called just before the fields switches to edit mode.\n     * This is a great place to set internal state of any input field\n     * before going into edit mode.\n     */\n    onEditStart?: EditStartHandler;\n\n    /**\n     * Called just after the stopEditing is called, and switches back\n     * to read mode.\n     * This is a great place to clean up after edit more, or reset any state\n     * before going back into read mode.\n     */\n    onEditStop?: () => void;\n\n    /**\n     * The preferred handler to use for handling all keyboard navigation in read mode.\n     * Navigation in edit mode should be implemented in the editor.\n     */\n    onNavigationKeys?: NavigationKeyHandler;\n\n    /**\n     * Called when submitting the field. The submit handler is responsible\n     * for invoking stop editing, and put the field back into read mode.\n     * The handler gets passed info about how the field is submitted.\n     */\n    onSubmit: SubmitHandler;\n\n    /**\n     * Render prop responsible for rendering the actual editor both in read and edit mode.\n     */\n    renderEditor: EditorRenderer;\n\n    /**\n     * Whether or not a blur event caught on the inside the field component\n     * should trigger submit.\n     */\n    submitOnBlur?: boolean;\n\n    /**\n     * Whether or not click-outside of the field and/or its descendant components\n     * should trigger submit.\n     */\n    submitOnClickOutside?: boolean;\n}\n\ninterface State {\n    isEditing: boolean;\n}\n\nexport class Field extends React.Component<Props, State> {\n    public static defaultProps = {\n        disabled: false,\n        submitOnBlur: false,\n        submitOnClickOutside: false,\n    };\n\n    private refContainer: HTMLDivElement | null = null;\n    private refFocuser: Focuser | null = null;\n    private tabRegistry: TabRegistry<string> | null = null;\n\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n        };\n    }\n\n    public componentDidMount() {\n        document.addEventListener('click', this.clickOutside, false);\n    }\n\n    public componentWillReceiveProps(nextProps: Props) {\n        if (!this.props.disabled && nextProps.disabled) {\n            this.stopEditing(true);\n        }\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener('click', this.clickOutside, false);\n    }\n\n    private clickOutside = (e: MouseEvent) => {\n        if (this.state.isEditing && this.props.submitOnClickOutside) {\n            if (this.refContainer != null && !this.refContainer.contains(e.target as HTMLElement)) {\n                this.props.onSubmit(this.stopEditing, 'click-outside');\n            }\n        }\n    };\n\n    private focus(opts?: FocuserOptions) {\n        if (this.props.disabled || this.refFocuser == null) {\n            return false;\n        }\n        return this.refFocuser.focus(opts);\n    }\n\n    private onBlur = (e: React.FocusEvent<HTMLDivElement>) => {\n        // don't prevent default on blur event\n        // or else the field actually won't get blurred.\n        e.stopPropagation();\n\n        if (!this.state.isEditing || !this.props.submitOnBlur) {\n            return;\n        }\n\n        this.props.onSubmit(this.stopEditing, 'blur');\n    };\n\n    private onClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.startEditing();\n    };\n\n    private onContainerClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.stopPropagation();\n        e.preventDefault();\n    };\n\n    private onEscape = () => {\n        if (this.state.isEditing) {\n            this.stopEditing();\n        } else {\n            if (this.tabRegistry != null) {\n                this.tabRegistry.focusParent();\n            }\n        }\n    };\n\n    private onFieldKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (this.props.disabled) {\n            return;\n        }\n\n        const modifier = e.shiftKey || e.metaKey || e.ctrlKey || e.altKey;\n        if (e.key === 'Enter' && !modifier) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.props.onSubmit(this.stopEditing, 'enter-key');\n        } else if (e.key === 'Escape' && !modifier) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.stopEditing();\n        }\n    };\n\n    private onLabelClick = (e: React.MouseEvent<HTMLLabelElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.focus({\n            focusOrigin: 'mouse',\n        });\n    };\n\n    private renderErrorMessage() {\n        if (this.props.errorMessage == null) {\n            return null;\n        }\n        return <div className=\"error-message\">{this.props.errorMessage}</div>;\n    }\n\n    private renderWithTabRegistry = (tabRegistry: TabRegistry<string> | null) => {\n        this.tabRegistry = tabRegistry;\n        return (\n            <div\n                className={this.props.className || 'field-container'}\n                onClick={this.onContainerClick}\n                ref={this.setContainerRef}\n            >\n                <Focuser\n                    disabled={this.props.disabled}\n                    focusKey={this.props.label}\n                    key=\"focuser\"\n                    onArrowKeys={this.props.onArrowKeys}\n                    onDelete={this.props.onDelete}\n                    onEnter={this.startEditing}\n                    onEscape={this.onEscape}\n                    onNavigationKeys={this.props.onNavigationKeys}\n                    onSpace={this.startEditing}\n                    ref={this.setFocuserRef}\n                />\n                <div\n                    className={'field' + (this.props.errorMessage == null ? '' : ' has-error')}\n                    onBlur={this.onBlur}\n                    onClick={this.onClick}\n                    onKeyDown={this.onFieldKeyDown}\n                >\n                    <label onClick={this.onLabelClick}>{this.props.label}</label>\n                    {this.props.renderEditor(this.state.isEditing, this.stopEditing)}\n                    {this.renderErrorMessage()}\n                </div>\n            </div>\n        );\n    };\n    private setContainerRef = (ref: HTMLDivElement | null) => {\n        this.refContainer = ref;\n    };\n\n    private setFocuserRef = (ref: Focuser | null) => {\n        this.refFocuser = ref;\n    };\n\n    private startEditing = () => {\n        if (this.props.disabled || this.state.isEditing) {\n            return;\n        }\n\n        this.setState({\n            isEditing: true,\n        });\n\n        if (this.props.onEditStart != null) {\n            this.props.onEditStart(this.stopEditing);\n        }\n    };\n\n    private stopEditing = (preventFocus?: boolean) => {\n        if (!this.state.isEditing) {\n            return;\n        }\n\n        this.setState(\n            {\n                isEditing: false,\n            },\n            () => {\n                if (preventFocus) {\n                    return;\n                }\n                this.focus({\n                    focusOrigin: 'user',\n                });\n            },\n        );\n\n        if (this.props.onEditStop != null) {\n            this.props.onEditStop();\n        }\n    };\n\n    public render() {\n        return <NavigationContext.Consumer>{this.renderWithTabRegistry}</NavigationContext.Consumer>;\n    }\n}\ntry {\n    // @ts-ignore\n    Field.displayName = \"Field\";\n    // @ts-ignore\n    Field.__docgenInfo = { \"description\": \"\", \"displayName\": \"Field\", \"props\": { \"className\": { \"defaultValue\": null, \"description\": \"Set the classname of the container element,\\nthis makes the component compatible with most css-in-js libraries\\nlike styled-components, glamor and emotion etc.\", \"name\": \"className\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"disabled\": { \"defaultValue\": { value: \"false\" }, \"description\": \"Whether or not the field is disabled; cannot be focused, start editing,\\nno navigation key events will be triggered/propagated.\", \"name\": \"disabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"errorMessage\": { \"defaultValue\": null, \"description\": \"If provided, the field get the className .has-error\\nadded, and render the error message adjecent to editor.\", \"name\": \"errorMessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"label\": { \"defaultValue\": null, \"description\": \"The label of the editor, must be unique amoung siblings\\nwithing a TabBoundary/TabRegistry.\", \"name\": \"label\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"onArrowKeys\": { \"defaultValue\": null, \"description\": \"Called when the underlying focuser has focus and\\nthe user presses down any arrow key of the keyboard.\\n@deprecated use [onNavigationKeys].\", \"name\": \"onArrowKeys\", \"required\": false, \"type\": { \"name\": \"ArrowKeyHandler\" } }, \"onDelete\": { \"defaultValue\": null, \"description\": \"Called when the underlying focuser has focus\\nand the user presses the delete key of the keyboard.\", \"name\": \"onDelete\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onEditStart\": { \"defaultValue\": null, \"description\": \"Called just before the fields switches to edit mode.\\nThis is a great place to set internal state of any input field\\nbefore going into edit mode.\", \"name\": \"onEditStart\", \"required\": false, \"type\": { \"name\": \"EditStartHandler\" } }, \"onEditStop\": { \"defaultValue\": null, \"description\": \"Called just after the stopEditing is called, and switches back\\nto read mode.\\nThis is a great place to clean up after edit more, or reset any state\\nbefore going back into read mode.\", \"name\": \"onEditStop\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onNavigationKeys\": { \"defaultValue\": null, \"description\": \"The preferred handler to use for handling all keyboard navigation in read mode.\\nNavigation in edit mode should be implemented in the editor.\", \"name\": \"onNavigationKeys\", \"required\": false, \"type\": { \"name\": \"NavigationKeyHandler\" } }, \"onSubmit\": { \"defaultValue\": null, \"description\": \"Called when submitting the field. The submit handler is responsible\\nfor invoking stop editing, and put the field back into read mode.\\nThe handler gets passed info about how the field is submitted.\", \"name\": \"onSubmit\", \"required\": true, \"type\": { \"name\": \"SubmitHandler\" } }, \"renderEditor\": { \"defaultValue\": null, \"description\": \"Render prop responsible for rendering the actual editor both in read and edit mode.\", \"name\": \"renderEditor\", \"required\": true, \"type\": { \"name\": \"EditorRenderer\" } }, \"submitOnBlur\": { \"defaultValue\": { value: \"false\" }, \"description\": \"Whether or not a blur event caught on the inside the field component\\nshould trigger submit.\", \"name\": \"submitOnBlur\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"submitOnClickOutside\": { \"defaultValue\": { value: \"false\" }, \"description\": \"Whether or not click-outside of the field and/or its descendant components\\nshould trigger submit.\", \"name\": \"submitOnClickOutside\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Field.tsx#Field\"] = { docgenInfo: Field.__docgenInfo, name: \"Field\", path: \"src/components/Field.tsx#Field\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import '../docz.less';\nimport { Playground, PropsTable } from 'docz';\nimport { useCallback, useMemo, useReducer, useState } from 'react';\nimport { Field } from './Field';\nimport { Focuser } from './Focuser';\nimport { NavigationContext } from './TabBoundary';\nimport { TabRegistry } from '../TabRegistry';\nimport { createNavigationHandler } from '../FieldNavigation';\n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"field\"}}>{`Field`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This component helps creating field-by-field editing components,\nso components that have life-cycles that looks something like this:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`read mode`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`user activates edit mode`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`user changes a value`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`user submits/persists the new value`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`read mode`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`And you would like to be able to focus the component in read mode,\nnavigate to next field or focusable component, without having an editable field.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"basic-usage\"}}>{`Basic usage`}</MDXTag>\n<Playground __codesandbox={`undefined`} __position={0} __code={`() => {\n  const onSubmit = stopEditing => stopEditing()\n  const renderEditor = isEditing => {\n    return isEditing ? (\n      <div className=\"editor active\">\n        Edit\n        <Focuser autoFocus={true} focusKey=\"field-focuser\" />\n      </div>\n    ) : (\n      <div className=\"editor\">Read</div>\n    )\n  }\n  return (\n    <Field label=\"Field\" onSubmit={onSubmit} renderEditor={renderEditor} />\n  )\n}`} __scope={{props: this ? this.props : props,useCallback,useMemo,useReducer,useState,Field,Focuser,NavigationContext,TabRegistry,createNavigationHandler}}>\n    {() => {\n        const onSubmit = stopEditing => stopEditing();\n        const renderEditor = isEditing => {\n            return isEditing ? (\n                <div className=\"editor active\">\n                    Edit\n                    <Focuser autoFocus={true} focusKey=\"field-focuser\" />\n                </div>\n            ) : (\n                <div className=\"editor\">Read</div>\n            );\n        };\n        return <Field label=\"Field\" onSubmit={onSubmit} renderEditor={renderEditor} />;\n    }}\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"tab-navigation-between-fields\"}}>{`Tab navigation between fields`}</MDXTag>\n<Playground __codesandbox={`undefined`} __position={1} __code={`() => {\n  const [tabRegistry, setTabRegistry] = useState(() => new TabRegistry())\n  const registryFetcher = useCallback(() => tabRegistry, [])\n  const onArrowKeys = useMemo(\n    () =>\n      createNavigationHandler(\n        [[\\'Field1\\', \\'Field2\\'], [\\'Field3\\', \\'Field4\\']],\n        registryFetcher,\n      ),\n    [],\n  )\n  const onSubmit = stopEditing => stopEditing()\n  const renderEditor = () => <div className=\"editor\">Value</div>\n  return (\n    <NavigationContext.Provider value={tabRegistry}>\n      <div className=\"flex-container\">\n        <Field\n          label=\"Field1\"\n          onArrowKeys={onArrowKeys}\n          onSubmit={onSubmit}\n          renderEditor={renderEditor}\n        />\n        <Field\n          label=\"Field2\"\n          onArrowKeys={onArrowKeys}\n          onSubmit={onSubmit}\n          renderEditor={renderEditor}\n        />\n      </div>\n      <div className=\"flex-container\">\n        <Field\n          label=\"Field3\"\n          onArrowKeys={onArrowKeys}\n          onSubmit={onSubmit}\n          renderEditor={renderEditor}\n        />\n        <Field\n          label=\"Field4\"\n          onArrowKeys={onArrowKeys}\n          onSubmit={onSubmit}\n          renderEditor={renderEditor}\n        />\n      </div>\n    </NavigationContext.Provider>\n  )\n}`} __scope={{props: this ? this.props : props,useCallback,useMemo,useReducer,useState,Field,Focuser,NavigationContext,TabRegistry,createNavigationHandler}}>\n    {() => {\n        const [tabRegistry, setTabRegistry] = useState(() => new TabRegistry);\n        const registryFetcher = useCallback(() => tabRegistry, []);\n        const onArrowKeys = useMemo(() => createNavigationHandler([\n            ['Field1','Field2'],\n            ['Field3','Field4'],\n        ], registryFetcher), []);\n        const onSubmit = stopEditing => stopEditing();\n        const renderEditor = () => <div className=\"editor\">Value</div>;\n        return (\n            <NavigationContext.Provider value={tabRegistry}>\n                <div className=\"flex-container\">\n                    <Field label=\"Field1\" onArrowKeys={onArrowKeys} onSubmit={onSubmit} renderEditor={renderEditor} />\n                    <Field label=\"Field2\" onArrowKeys={onArrowKeys} onSubmit={onSubmit} renderEditor={renderEditor} />\n                </div>\n                <div className=\"flex-container\">\n                    <Field label=\"Field3\" onArrowKeys={onArrowKeys} onSubmit={onSubmit} renderEditor={renderEditor} />\n                    <Field label=\"Field4\" onArrowKeys={onArrowKeys} onSubmit={onSubmit} renderEditor={renderEditor} />\n                </div>\n            </NavigationContext.Provider>\n        );\n    }}\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"setting-up-custom-field\"}}>{`Setting up custom field`}</MDXTag>\n<Playground __codesandbox={`undefined`} __position={2} __code={`() => {\n  const [state, setState] = useReducer(\n    (oldState, newState) => ({\n      ...oldState,\n      ...newState,\n    }),\n    {\n      editorValue: \\'\\',\n      errorMessage: null,\n      value: \\'user@domain.tld\\',\n    },\n  )\n  const onEditStart = useCallback(\n    () => setState({ editorValue: state.value }),\n    [state.value],\n  )\n  const onEditStop = useCallback(() => setState({ errorMessage: null }), [])\n  const onChange = useCallback(\n    e => setState({ editorValue: e.target.value }),\n    [],\n  )\n  const onSubmit = useCallback(\n    (stopEditing, submittedOn) => {\n      if (!/^.+@.+\\\\..+$/.test(state.editorValue)) {\n        setState({ errorMessage: \\'Invalid email address\\' })\n        return\n      }\n      setState({ value: state.editorValue })\n      stopEditing()\n    },\n    [state.editorValue],\n  )\n  const renderEditor = useCallback(\n    isEditing => {\n      const editor = isEditing ? (\n        <input\n          autoFocus={true}\n          onChange={onChange}\n          spellCheck={false}\n          type=\"email\"\n          value={state.editorValue}\n        />\n      ) : (\n        <div className=\"value\">{state.value}</div>\n      )\n      return (\n        <div className={\\'editor\\' + (isEditing ? \\' active\\' : \\'\\')}>\n          {editor}\n        </div>\n      )\n    },\n    [state.value, state.editorValue],\n  )\n  return (\n    <Field\n      errorMessage={state.errorMessage}\n      label=\"E-mail\"\n      onSubmit={onSubmit}\n      onEditStart={onEditStart}\n      onEditStop={onEditStop}\n      renderEditor={renderEditor}\n      submitOnBlur={true}\n    />\n  )\n}`} __scope={{props: this ? this.props : props,useCallback,useMemo,useReducer,useState,Field,Focuser,NavigationContext,TabRegistry,createNavigationHandler}}>\n    {() => {\n        const [state, setState] = useReducer((oldState, newState) => ({\n            ...oldState,\n            ...newState,\n        }), {\n            editorValue: '',\n            errorMessage: null,\n            value: 'user@domain.tld',\n        });\n        const onEditStart = useCallback(() => setState({editorValue: state.value}), [state.value]);\n        const onEditStop = useCallback(() => setState({errorMessage: null}), []);\n        const onChange = useCallback(e => setState({editorValue: e.target.value}), []);\n        const onSubmit = useCallback((stopEditing, submittedOn) => {\n            if (!/^.+@.+\\\\..+$/.test(state.editorValue)) {\n                setState({errorMessage: 'Invalid email address'});\n                return;\n            }\n            setState({value: state.editorValue});\n            stopEditing();\n        }, [state.editorValue]);\n        const renderEditor = useCallback((isEditing) => {\n            const editor = isEditing ? (\n                <input autoFocus={true} onChange={onChange} spellCheck={false} type=\"email\" value={state.editorValue} />\n            ) : (\n                <div className=\"value\">{state.value}</div>\n            );\n            return <div className={'editor' + (isEditing ? ' active' : '')}>{editor}</div>;\n        }, [state.value, state.editorValue]);\n    return (\n        <Field\n            errorMessage={state.errorMessage}\n            label=\"E-mail\"\n            onSubmit={onSubmit}\n            onEditStart={onEditStart}\n            onEditStop={onEditStop}\n            renderEditor={renderEditor}\n            submitOnBlur={true}\n        />\n    );\n}}\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<PropsTable of={Field} />\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}
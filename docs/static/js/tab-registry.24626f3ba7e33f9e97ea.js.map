{"version":3,"sources":["webpack:///./src/TabRegistry.mdx","webpack:///./src/TabRegistry.ts"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","docz__WEBPACK_IMPORTED_MODULE_2__","of","__docgenInfo","TabRegistry","focusOriginNone","focusOrigin","focusOriginNext","focusOriginPrev","focusOriginChild","Symbol","iterator","options","cycle","focusCycleStartKey","focuserMap","internalParentRegistry","parentRegistryKey","registry","focusFirstOnNextOrigin","focusParentOnChildOrigin","_Symbol$iterator","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","key","wrap","_context","prev","next","isEmpty","abrupt","firstKey","delegateYield","Array","from","get","getNextKey","stop","keys","_callee2","_context2","first","keysRecursive","_callee3","focuser","_context3","Map","DoublyLinkedOrderedSet","_createClass","last","lastKey","parentRegistry","value","map","forEach","r","fromMap","add","iterable","padding","level","lvl","result","_arr","_i","length","val","_toString","set","setParentRegistry","afterKey","addAfter","beforeKey","addBefore","delete","opts","focusParent","internalKey","focus","undefined","_objectSpread","focusFirst","focusNext","focusIn","concat","_toConsumableArray","shift","has","k","focusLast","focusPrev","current","i","size","getPrevKey","Error","setAfter","setBefore","displayName","description","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error"],"mappings":"w+CAOqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,mGAAAC,CAAAC,KAAAJ,IACjBE,EAAAG,EAAAD,KAAAE,EAAAN,GAAAO,KAAAH,KAAMH,KACDO,OAAS,KAFGN,yPADmBO,IAAMC,kDAKnC,IAAAC,EAC0BP,KAAKH,MAA9BW,EADDD,EACCC,WADDC,EAAAF,EAAA,gBAGP,OAAOG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEC,KAAK,UAELN,WAAYA,GACzBE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYX,MAAO,CAACkB,GAAK,iBAAvD,gBACAL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,shBAMAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYX,MAAO,CAACkB,GAAK,mBAAvD,kBACAL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,+TAGAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYX,MAAO,CAACkB,GAAK,QAAvD,OACAL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAYC,GAAI,CAAEC,aAAc,CAAErB,MAAOsB,m7BCYzC,IAAMC,EAAkC,CAAEC,YAAa,QACjDC,EAAkC,CAAED,YAAa,QACjDE,EAAkC,CAAEF,YAAa,QACjDG,EAAmC,CAAEH,YAAa,WA0L5CI,OAAOC,SArLNP,EAAb,WA2II,SAAAA,EAAYQ,gGAA8B5B,CAAAC,KAAAmB,GAAAnB,KAzClC4B,OAAiB,EAyCiB5B,KAnClC6B,mBAA+B,KAmCG7B,KA9BlC8B,gBA8BkC,EAAA9B,KAzBlC+B,4BAyBkC,EAAA/B,KApBlCgC,uBAoBkC,EAAAhC,KAflCiC,cAekC,EAAAjC,KAVnCkC,4BAUmC,EAAAlC,KALnCmC,8BAKmC,EAAAnC,KAAAoC,GAAAC,EAAA1B,EAAA2B,KA0Cf,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAA1B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACnB5C,KAAK6C,QADc,CAAAH,EAAAE,KAAA,eAAAF,EAAAI,OAAA,iBAKnBN,EAAgBxC,KAAK+C,SALF,WAMhBP,EANgB,CAAAE,EAAAE,KAAA,cAOfJ,aAAerB,GAPA,CAAAuB,EAAAE,KAAA,QAQf,OAAAF,EAAAM,cAAOC,MAAMC,KAAKV,GAAlB,QARe,OAAAE,EAAAE,KAAA,gBAUf,OAVeF,EAAAE,KAAA,GAUT5C,KAAK8B,WAAWqB,IAAIX,GAVX,QAYnBA,EAAMxC,KAAKoD,WAAWZ,GAZHE,EAAAE,KAAA,iCAAAF,EAAAW,SAAAd,EAAAvC,QA1CeA,KAwkBnCsD,KAxkBmCjB,EAAA1B,EAAA2B,KAwkB5B,SAAAiB,IAAA,IAAAf,EAAA,OAAAH,EAAA1B,EAAA8B,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,WACN5C,KAAKiC,SAASY,QADR,CAAAW,EAAAZ,KAAA,eAAAY,EAAAV,OAAA,iBAKNN,EAAgBxC,KAAKiC,SAASwB,MALxB,WAMHjB,EANG,CAAAgB,EAAAZ,KAAA,QAON,OAPMY,EAAAZ,KAAA,EAOAJ,EAPA,OAQNA,EAAMxC,KAAKoD,WAAWZ,GARhBgB,EAAAZ,KAAA,gCAAAY,EAAAH,SAAAE,EAAAvD,QAxkB4BA,KAwlBnC0D,cAxlBmCrB,EAAA1B,EAAA2B,KAwlBnB,SAAAqB,IAAA,IAAAnB,EAAAoB,EAAA,OAAAvB,EAAA1B,EAAA8B,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,WACf5C,KAAKiC,SAASY,QADC,CAAAgB,EAAAjB,KAAA,eAAAiB,EAAAf,OAAA,iBAKfN,EAAgBxC,KAAKiC,SAASwB,MALf,WAMZjB,EANY,CAAAqB,EAAAjB,KAAA,eAOTgB,EAAU5D,KAAK8B,WAAWqB,IAAIX,cACbrB,GARR,CAAA0C,EAAAjB,KAAA,QASX,OAAAiB,EAAAb,cAAOC,MAAMC,KAAKU,EAAQF,iBAA1B,QATW,OAAAG,EAAAjB,KAAA,gBAWX,OAXWiB,EAAAjB,KAAA,GAWLJ,EAXK,QAafA,EAAMxC,KAAKoD,WAAWZ,GAbPqB,EAAAjB,KAAA,iCAAAiB,EAAAR,SAAAM,EAAA3D,QAvlBnBA,KAAK8B,WAAa,IAAIgC,IACtB9D,KAAKiC,SAAW,IAAI8B,IACpB/D,KAAK+B,uBAAyB,KACf,MAAXJ,GACA3B,KAAK4B,OAAQ,EACb5B,KAAKkC,wBAAyB,EAC9BlC,KAAKmC,0BAA2B,IAEhCnC,KAAK4B,OAA0B,IAAlBD,EAAQC,MACrB5B,KAAKkC,wBAA4D,IAAnCP,EAAQO,uBACtClC,KAAKmC,0BAAgE,IAArCR,EAAQQ,0BAtJpD,OAAA6B,EAAA7C,EAAA,EAAAqB,IAAA,QAAAW,IAAA,WAEQ,IAAMM,EAAQzD,KAAK+C,SACnB,OAAa,MAATU,EACO,KAEJzD,KAAK8B,WAAWqB,IAAIM,KANnC,CAAAjB,IAAA,WAAAW,IAAA,WAcQ,OAAInD,KAAK6C,QACE,KAEJ7C,KAAKiC,SAASwB,QAjB7B,CAAAjB,IAAA,iBAAAW,IAAA,WAwBQ,OAAsB,IAAfnD,KAAK4B,QAxBpB,CAAAY,IAAA,UAAAW,IAAA,WA+BQ,OAAOnD,KAAKiC,SAASY,UA/B7B,CAAAL,IAAA,OAAAW,IAAA,WAmCQ,IAAMc,EAAOjE,KAAKkE,QAClB,OAAY,MAARD,EACO,KAEJjE,KAAK8B,WAAWqB,IAAIc,KAvCnC,CAAAzB,IAAA,UAAAW,IAAA,WA+CQ,OAAInD,KAAK6C,QACE,KAEJ7C,KAAKiC,SAASgC,OAlD7B,CAAAzB,IAAA,iBAAAW,IAAA,WAyDQ,OAAOnD,KAAK+B,yBAzDpB,CAAAS,IAAA,eAAAW,IAAA,WAkEQ,IADA,IAAIlB,EAA2BjC,KACG,MAA3BiC,EAASkC,gBACZlC,EAAWA,EAASkC,eAExB,OAAOlC,KArEf,EAAAO,IAAA,QAAA4B,MAAA,WA4EQ,OAAO,IAAIjD,IA5EnB,CAAAqB,IAAA,UAAA4B,MAAA,SAiFyCC,EAAwB1C,GACzD,IAAMM,EAAW,IAAId,EAAqBQ,GAS1C,OARA0C,EAAIC,QAAQ,SAACF,EAA4C5B,GACrD,GAAI4B,aAAiBN,IAAK,CACtB,IAAMS,EAAIpD,EAAYqD,QAAQJ,GAC9BnC,EAASwC,IAAIjC,EAAK+B,QAElBtC,EAASwC,IAAIjC,EAAK4B,KAGnBnC,MA3Ff+B,EAAA7C,EAAA,EAAAqB,IAAA,YAAA4B,MAAA,SA6JsBM,EAAuBC,EAAiBC,GAItD,IAHA,IAAMC,EAAe,MAATD,EAAgB,EAAIA,EAC5BE,EAAS,GACTrB,GAAQ,EAHkEsB,EAI5D9B,MAAMC,KAAKwB,GAA7BM,EAAA,EAAAA,EAAAD,EAAAE,OAAAD,IAAwC,CAAnC,IAAMxC,EAAGuC,EAAAC,GACNvB,EACAA,GAAQ,EAERqB,GAAU,MAGd,IAAMI,EAAMlF,KAAK8B,WAAWqB,IAAIX,GAE5BsC,GADAI,aAAe/D,EACLnB,KAAKmF,UAAUhF,KAAK+E,EAAKA,EAAI5B,OAAQqB,EAAU,OAAQE,EAAM,GAE7DF,EAAUnC,EAG5B,OAAOsC,IA/Kf,CAAAtC,IAAA,MAAA4B,MAAA,SAwMe5B,EAAQoB,GACf5D,KAAKiC,SAASwC,IAAIjC,GAClBxC,KAAK8B,WAAWsD,IAAI5C,EAAKoB,GACrBA,aAAmBzC,GACnByC,EAAQyB,kBAAkB7C,EAAKxC,QA5M3C,CAAAwC,IAAA,WAAA4B,MAAA,SAoNoB5B,EAAQoB,EAAyB0B,GAC7CtF,KAAKiC,SAASsD,SAAS/C,EAAK8C,GAC5BtF,KAAK8B,WAAWsD,IAAI5C,EAAKoB,GACrBA,aAAmBzC,GACnByC,EAAQyB,kBAAkB7C,EAAKxC,QAxN3C,CAAAwC,IAAA,YAAA4B,MAAA,SAgOqB5B,EAAQoB,EAAyB4B,GAC9CxF,KAAKiC,SAASwD,UAAUjD,EAAKgD,GAC7BxF,KAAK8B,WAAWsD,IAAI5C,EAAKoB,GACrBA,aAAmBzC,GACnByC,EAAQyB,kBAAkB7C,EAAKxC,QApO3C,CAAAwC,IAAA,SAAA4B,MAAA,SA4OkB5B,GACVxC,KAAKiC,SAASyD,OAAOlD,GACrBxC,KAAK8B,WAAW4D,OAAOlD,KA9O/B,CAAAA,IAAA,eAAA4B,MAAA,WAsPQ,OADApE,KAAK4B,OAAQ,EACN5B,OAtPf,CAAAwC,IAAA,cAAA4B,MAAA,WA8PQ,OADApE,KAAK4B,OAAQ,EACN5B,OA9Pf,CAAAwC,IAAA,QAAA4B,MAAA,SAqQiB5B,EAASb,GAClB,IAAMgE,EAAOhE,GAAWP,EACxB,GAAIpB,KAAKmC,0BAAiD,UAArBwD,EAAKtE,YACtC,OAAOrB,KAAK4F,cAGhB,IAAIC,EAAoCrD,EACxC,GAAmB,MAAfqD,GAMmB,OAFfA,EAHW,MAAXlE,GAA2C,SAAxBA,EAAQN,aAA2BM,EAAQO,uBAGhDlC,KAAK+C,SAFL/C,KAAKkE,SAKnB,OAAO,EAIf,IAAMN,EAAU5D,KAAK8B,WAAWqB,IAAI0C,GACpC,OAAe,MAAXjC,IAIGA,aAAmBzC,EACpByC,EAAQkC,WAAMC,qUAAdC,CAAA,GAA8BL,EAA9B,CAAoCzD,uBAAwB0B,EAAQ1B,0BACpE0B,EAAQ+B,MA9RtB,CAAAnD,IAAA,aAAA4B,MAAA,WA0SQ,GAAIpE,KAAKiC,SAASY,QACd,OAAO,EAGX,IAAMY,EAAQzD,KAAKiC,SAASwB,MACtBG,EAAU5D,KAAK8B,WAAWqB,IAAIM,GACpC,OAAe,MAAXG,OAIWA,aAAmBzC,EAAcyC,EAAQqC,aAAerC,EAAQrC,MAIvEvB,KAAK4B,OAAoC,MAA3B5B,KAAK6B,qBACnB7B,KAAK6B,mBAAqB4B,GAEvBzD,KAAKkG,UAAUzC,OA3TlC,CAAAjB,IAAA,eAAA4B,MAAA,SAmUwBd,GAChB,GAAItD,KAAKiC,SAASY,QACd,OAAO,EAEX,IAAMY,EAAQzD,KAAKiC,SAASwB,MAC5B,OAAa,MAATA,GAIGzD,KAAKmG,QAAL,CAAc1C,GAAd2C,OAAAC,EAAwB/C,IAAO/B,KA5U9C,CAAAiB,IAAA,UAAA4B,MAAA,SAmVmBd,EAAW3B,GACtB,IAAIa,EAAMc,EAAKgD,QACf,GAAW,MAAP9D,EACA,OAAO,EAGX,IADA,IAAIP,EAA2BjC,KACxBiC,EAASsE,IAAI/D,IAAM,CACtB,IAAMoB,EAAU3B,EAASkB,IAAIX,GAC7B,GAAe,MAAXoB,EACA,OAAO,EAGX,IAAM4C,EAAIlD,EAAKgD,QACf,GAAS,MAALE,EAQA,OAAI5C,aAAmBzC,EACZyC,EAAQkC,WAAMC,EAAWpE,GAGrBiC,EADI,MAAXjC,EACeP,EAEAO,GAZvB,GADAa,EAAMgE,IACF5C,aAAmBzC,GAGnB,OAAO,EAFPc,EAAW2B,EAiBvB,OAAO,IApXf,CAAApB,IAAA,YAAA4B,MAAA,WAgYQ,GAAIpE,KAAKiC,SAASY,QACd,OAAO,EAGX,IAAMoB,EAAOjE,KAAKiC,SAASgC,KACrBL,EAAU5D,KAAK8B,WAAWqB,IAAIc,GACpC,OAAe,MAAXL,OAIWA,aAAmBzC,EAAcyC,EAAQ6C,YAAc7C,EAAQtC,MAKtEtB,KAAK4B,OAAoC,MAA3B5B,KAAK6B,qBACnB7B,KAAK6B,mBAAqBoC,GAEvBjE,KAAK0G,UAAUzC,OAlZlC,CAAAzB,IAAA,cAAA4B,MAAA,SA0ZuBd,GACf,GAAItD,KAAKiC,SAASY,QACd,OAAO,EAEX,IAAMoB,EAAOjE,KAAKiC,SAASgC,KAC3B,OAAY,MAARA,GAGGjE,KAAKmG,QAAL,CAAclC,GAAdmC,OAAAC,EAAuB/C,IAAOhC,KAla7C,CAAAkB,IAAA,YAAA4B,MAAA,SA6aqB5B,GASb,IALA,IAAIoB,EACA+C,EACA/D,EAAO5C,KAAKoD,WAAWZ,GAGlBoE,EAFU5G,KAAKiC,SAAS4E,KAERD,EAAI,GACb,MAARhE,EADwBgE,IAS5B,GAJAD,EAAU/D,EACVgB,EAAU5D,KAAK8B,WAAWqB,IAAIwD,GAC9B/D,EAAO5C,KAAKoD,WAAWuD,GAER,MAAX/C,EAAJ,CAMA,GAFeA,aAAmBzC,EAAcyC,EAAQqC,aAAerC,EAAQrC,GAI3E,OADAvB,KAAK6B,mBAAqB,MACnB,EAIX,GAAI7B,KAAK4B,OAAS+E,IAAY3G,KAAK6B,mBAE/B,OADA7B,KAAK6B,mBAAqB,MACnB,EAIf,GAAI7B,KAAK4B,MAAO,CAGZ,GAA+B,MAA3B5B,KAAK6B,mBACL7B,KAAK6B,mBAAqBW,OAIvB,GAAIxC,KAAK6B,qBAAuBW,EAEnC,OADAxC,KAAK6B,mBAAqB,MACnB,EAEX,OAAO7B,KAAKiG,aAGhB,OAAmC,MAA/BjG,KAAK+B,wBACL/B,KAAK6B,mBAAqB,KAC1B7B,KAAK+B,uBAAuBmE,UAAUlG,KAAKgC,oBACpC,IAGXhC,KAAK6B,mBAAqB,MACnB,KAvef,CAAAW,IAAA,cAAA4B,MAAA,SA8euBd,GACf,IAAMd,EAAMc,EAAKgD,QACjB,GAAW,MAAP9D,EACA,OAAO,EAEX,IAAMI,EAAO5C,KAAKoD,WAAWZ,GAC7B,OAAY,MAARI,GAGG5C,KAAKmG,QAAL,CAAcvD,GAAdwD,OAAAC,EAAuB/C,IAAO/B,KAvf7C,CAAAiB,IAAA,cAAA4B,MAAA,WA8fQ,OAAmC,MAA/BpE,KAAK+B,wBACE/B,KAAK+B,uBAAuB+D,WAAMC,EAAWvE,KA/fhE,CAAAgB,IAAA,YAAA4B,MAAA,SA4gBqB5B,GASb,IALA,IAAIoB,EACA+C,EACAhE,EAAO3C,KAAK8G,WAAWtE,GAGlBoE,EAFU5G,KAAKiC,SAAS4E,KAERD,EAAI,GACb,MAARjE,EADwBiE,IAS5B,GAJAD,EAAUhE,EACViB,EAAU5D,KAAK8B,WAAWqB,IAAIR,GAC9BA,EAAO3C,KAAK8G,WAAWnE,GAER,MAAXiB,EAAJ,CAMA,GAFeA,aAAmBzC,EAAcyC,EAAQ6C,YAAc7C,EAAQtC,GAI1E,OADAtB,KAAK6B,mBAAqB,MACnB,EAIX,GAAI7B,KAAK4B,OAAS+E,IAAY3G,KAAK6B,mBAE/B,OADA7B,KAAK6B,mBAAqB,MACnB,EAIf,GAAI7B,KAAK4B,MAAO,CAGZ,GAA+B,MAA3B5B,KAAK6B,mBACL7B,KAAK6B,mBAAqBW,OAIvB,GAAIxC,KAAK6B,qBAAuBW,EAEnC,OADAxC,KAAK6B,mBAAqB,MACnB,EAEX,OAAO7B,KAAKyG,YAGhB,OAAmC,MAA/BzG,KAAK+B,wBACL/B,KAAK6B,mBAAqB,KAC1B7B,KAAK+B,uBAAuB2E,UAAU1G,KAAKgC,oBACpC,IAGXhC,KAAK6B,mBAAqB,MACnB,KAtkBf,CAAAW,IAAA,cAAA4B,MAAA,SA6kBuBd,GACf,IAAMd,EAAMc,EAAKgD,QACjB,GAAW,MAAP9D,EACA,OAAO,EAEX,IAAMG,EAAO3C,KAAK8G,WAAWtE,GAC7B,OAAY,MAARG,GAGG3C,KAAKmG,QAAL,CAAcxD,GAAdyD,OAAAC,EAAuB/C,IAAOhC,KAtlB7C,CAAAkB,IAAA,MAAA4B,MAAA,SA8lBe5B,GACP,IAAMoB,EAAU5D,KAAK8B,WAAWqB,IAAIX,GACpC,OAAe,MAAXoB,EACO,KAEAA,IAnmBnB,CAAApB,IAAA,UAAA4B,MAAA,SA2mBmB5B,GACX,IAAMI,EAAO5C,KAAKoD,WAAWZ,GAC7B,GAAY,MAARI,EACA,OAAO,KAEX,IAAMgB,EAAU5D,KAAK8B,WAAWqB,IAAIP,GACpC,OAAe,MAAXgB,EACO,KAEJA,IApnBf,CAAApB,IAAA,aAAA4B,MAAA,SA0nBsB5B,GACd,OAAOxC,KAAKiC,SAASW,KAAKJ,KA3nBlC,CAAAA,IAAA,UAAA4B,MAAA,SAkoBmB5B,GACX,IAAMG,EAAO3C,KAAK8G,WAAWtE,GAC7B,GAAY,MAARG,EACA,OAAO,KAEX,IAAMiB,EAAU5D,KAAK8B,WAAWqB,IAAIR,GACpC,OAAe,MAAXiB,EACO,KAEJA,IA3oBf,CAAApB,IAAA,aAAA4B,MAAA,SAipBsB5B,GACd,OAAOxC,KAAKiC,SAASU,KAAKH,KAlpBlC,CAAAA,IAAA,MAAA4B,MAAA,SAwpBe5B,GACP,OAAOxC,KAAK8B,WAAWyE,IAAI/D,KAzpBnC,CAAAA,IAAA,QAAA4B,MAAA,SAgqBiBd,GACT,IAAId,EAAMc,EAAKgD,QACf,GAAW,MAAP9D,EACA,OAAO,EAGX,IADA,IAAIP,EAA2BjC,KACxBiC,EAASsE,IAAI/D,IAAM,CACtB,IAAMoB,EAAU3B,EAASkB,IAAIX,GAC7B,GAAe,MAAXoB,EACA,OAAO,EAGX,IAAM4C,EAAIlD,EAAKgD,QACf,GAAS,MAALE,EAQA,OAAO,EANP,GADAhE,EAAMgE,IACF5C,aAAmBzC,GAGnB,OAAO,EAFPc,EAAW2B,EASvB,OAAO,IAzrBf,CAAApB,IAAA,UAAA4B,MAAA,SA+rBmB5B,GACX,QAAKxC,KAAKiC,SAASsE,IAAI/D,IAGQ,MAAxBxC,KAAKoD,WAAWZ,KAnsB/B,CAAAA,IAAA,UAAA4B,MAAA,SAysBmB5B,GACX,QAAKxC,KAAKiC,SAASsE,IAAI/D,IAGQ,MAAxBxC,KAAK8G,WAAWtE,KA7sB/B,CAAAA,IAAA,WAAA4B,MAAA,SAuvBoB5B,GAEZ,GAAe,MADCxC,KAAK8B,WAAWqB,IAAIX,GAEhC,MAAM,IAAIuE,MAAJ,eAAAX,OAAyB5D,EAAzB,mBAEV,IAAMI,EAAO5C,KAAKoD,WAAWZ,GACjB,MAARI,GACA5C,KAAKiC,SAAS+E,SAASxE,EAAKI,KA9vBxC,CAAAJ,IAAA,WAAA4B,MAAA,SAqwBoB5B,GAEZ,GAAe,MADCxC,KAAK8B,WAAWqB,IAAIX,GAEhC,MAAM,IAAIuE,MAAJ,eAAAX,OAAyB5D,EAAzB,mBAEV,IAAMG,EAAO3C,KAAK8G,WAAWtE,GACjB,MAARG,GACA3C,KAAKiC,SAASgF,UAAUzE,EAAKG,KA5wBzC,CAAAH,IAAA,MAAA4B,MAAA,SAqxBe5B,EAAQoB,GAEf,GAAuB,MADC5D,KAAK8B,WAAWqB,IAAIX,GAExC,MAAM,IAAIuE,MAAJ,uBAAAX,OAAiC5D,IAEvCxC,KAAK8B,WAAWsD,IAAI5C,EAAKoB,KA1xBrC,CAAApB,IAAA,oBAAA4B,MAAA,SAkyB6BpC,EAAwBmC,GAC7CnE,KAAK+B,uBAAyBoC,EAC9BnE,KAAKgC,kBAAoBA,IApyBjC,CAAAQ,IAAA,WAAA4B,MAAA,WA4yBQ,MAAO,iBAAmBpE,KAAKmF,UAAUnF,KAAKiC,SAAU,QAAU,UA5yB1Ed,EAAA,GA+yBA,IAEIA,EAAY+F,YAAc,cAE1B/F,EAAYD,aAAe,CAAEiG,YAAe,kEAAmED,YAAe,cAAerH,MAAS,IAE/G,qBAA5BuH,0BAEPA,wBAAwB,kCAAoC,CAAEC,WAAYlG,EAAYD,aAAcJ,KAAM,cAAewG,KAAM,mCAEvI,MAAOC","file":"static/js/tab-registry.8db908a6.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport { TabRegistry } from './TabRegistry';\nimport { Component } from 'react';\n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"tab-registry\"}}>{`Tab registry`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The core of this project lives inside this utility class and data structure.\nA registry is basically just a glorified map, from an identifier to a focus function.\nThe registry keeps track of identifiers and their corresponding focus function, every focus\nfunction has a two jobs, number is to focus its component it represents, and report back to\nif it was successful. Their can be any number of reason why a focus call wasn't successful,\nthe most common one is if the component / input fields is in some kind disabled state.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"data-structure\"}}>{`Data structure`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The registry itself is powered by a doubly linked ordered set of identifiers and a map from an identifier\nand its corresponding focus function, this means that an identifier can only be used once per registry,\nhower it is possible to nest registries, so the identifiers only needs to be unique among its siblings.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"api\"}}>{`API`}</MDXTag>\n<PropsTable of={{ __docgenInfo: { props: TabRegistry } }} />\n           </MDXTag>\n  }\n}\n  ","import { DoublyLinkedOrderedSet } from '@secoya/collection.ts';\n\nexport type FocusOrigin =\n    | 'child'\n    | 'custom'\n    | 'down'\n    | 'keyboard'\n    | 'left'\n    | 'mouse'\n    | 'next'\n    | 'none'\n    | 'parent'\n    | 'prev'\n    | 'right'\n    | 'up'\n    | 'user';\n\nexport interface FocuserOptions {\n    focusFirstOnNextOrigin?: boolean;\n    focusOrigin: FocusOrigin;\n}\n\nexport type FocuserFn = (foucuserOpts: FocuserOptions) => boolean;\nexport type FocuserType<E = any> = TabRegistry<E> | FocuserFn;\n\nexport interface TabRegistryOptions {\n    /**\n     * When enabled the registry won't jump boundries\n     * but just focus the opposite end of the tab registry.\n     */\n    cycle?: boolean;\n\n    /**\n     * If focus is called with origin next, focus first instead of last.\n     */\n    focusFirstOnNextOrigin?: boolean;\n\n    /**\n     * If focus is called with origin child focus next parent.\n     */\n    focusParentOnChildOrigin?: boolean;\n}\n\nconst focusOriginNone: FocuserOptions = { focusOrigin: 'none' };\nconst focusOriginNext: FocuserOptions = { focusOrigin: 'next' };\nconst focusOriginPrev: FocuserOptions = { focusOrigin: 'prev' };\nconst focusOriginChild: FocuserOptions = { focusOrigin: 'child' };\n\n/**\n * Library class for controlling complex nested linked structures.\n */\nexport class TabRegistry<E = any> {\n    public get first(): FocuserType<E> | null {\n        const first = this.firstKey;\n        if (first == null) {\n            return null;\n        }\n        return this.focuserMap.get(first) as FocuserType<E>;\n    }\n\n    /**\n     * The first key of the registry.\n     * Is `null` if registry is empty.\n     */\n    public get firstKey(): E | null {\n        if (this.isEmpty) {\n            return null;\n        }\n        return this.registry.first;\n    }\n\n    /**\n     * Property is `true` when tab cycling is enabled.\n     */\n    public get isCycleEnabled() {\n        return this.cycle === true;\n    }\n\n    /**\n     * Property is `true` if the registry is empty.\n     */\n    public get isEmpty(): boolean {\n        return this.registry.isEmpty;\n    }\n\n    public get last(): FocuserType<E> | null {\n        const last = this.lastKey;\n        if (last == null) {\n            return null;\n        }\n        return this.focuserMap.get(last) as FocuserType<E>;\n    }\n\n    /**\n     * The last key of the registry.\n     * Is `null` if registry is empty.\n     */\n    public get lastKey(): E | null {\n        if (this.isEmpty) {\n            return null;\n        }\n        return this.registry.last;\n    }\n\n    /**\n     * Get the parent registry if exists.\n     */\n    public get parentRegistry(): TabRegistry<E> | null {\n        return this.internalParentRegistry;\n    }\n\n    /**\n     * Get the root registry, recurse to toplevel.\n     * If `this` registry has no parent return itself.\n     */\n    public get rootRegistry(): TabRegistry<E> | this {\n        let registry: TabRegistry<E> = this;\n        while (registry.parentRegistry != null) {\n            registry = registry.parentRegistry;\n        }\n        return registry;\n    }\n\n    /**\n     * Constructs any empty registry with default options.\n     */\n    public static empty<EStatic = any>() {\n        return new TabRegistry<EStatic>();\n    }\n    /**\n     * Construct registry from nested map structure.\n     */\n    public static fromMap<EStatic = any>(map: Map<EStatic, any>, options?: TabRegistryOptions): TabRegistry<EStatic> {\n        const registry = new TabRegistry<EStatic>(options);\n        map.forEach((value: FocuserFn | Map<EStatic, FocuserFn>, key: EStatic) => {\n            if (value instanceof Map) {\n                const r = TabRegistry.fromMap(value);\n                registry.add(key, r);\n            } else {\n                registry.add(key, value);\n            }\n        });\n        return registry;\n    }\n\n    /**\n     * When this is true, the registry won't jump boundries\n     * but just focus the opposite end of the tab registry.\n     */\n    private cycle: boolean = false;\n\n    /**\n     * Indicator for if focus cycle is running.\n     * This is used for detect infinite loops.\n     */\n    private focusCycleStartKey: E | null = null;\n\n    /**\n     * Internal map from key to a `focuser`\n     */\n    private focuserMap: Map<E, FocuserType<E>>;\n\n    /**\n     * Reference to the parent registry if it exists.\n     */\n    private internalParentRegistry: TabRegistry<E> | null;\n\n    /**\n     * The key to this registry from the parent registry if it exists.\n     */\n    private parentRegistryKey: any;\n\n    /**\n     * The internal set that maintain order.\n     */\n    private registry: DoublyLinkedOrderedSet<E>;\n\n    /**\n     * If focus is called with origin next, focus first instead of last.\n     */\n    public focusFirstOnNextOrigin: boolean;\n\n    /**\n     * If focus is called with origin child focus next parent.\n     */\n    public focusParentOnChildOrigin: boolean;\n\n    /**\n     * Constructs a registry with optional parent registry.\n     */\n    constructor(options?: TabRegistryOptions) {\n        this.focuserMap = new Map();\n        this.registry = new DoublyLinkedOrderedSet<E>();\n        this.internalParentRegistry = null;\n        if (options == null) {\n            this.cycle = false;\n            this.focusFirstOnNextOrigin = false;\n            this.focusParentOnChildOrigin = false;\n        } else {\n            this.cycle = options.cycle === true;\n            this.focusFirstOnNextOrigin = options.focusFirstOnNextOrigin === true;\n            this.focusParentOnChildOrigin = options.focusParentOnChildOrigin === true;\n        }\n    }\n\n    /**\n     * Pretty print all the keys recursively.\n     */\n    private _toString(iterable: Iterable<E>, padding: string, level?: number): string {\n        const lvl = level == null ? 1 : level;\n        let result = '';\n        let first = true;\n        for (const key of Array.from(iterable)) {\n            if (first) {\n                first = false;\n            } else {\n                result += ',\\n';\n            }\n\n            const val = this.focuserMap.get(key);\n            if (val instanceof TabRegistry) {\n                result += this._toString.call(val, val.keys(), padding + '    ', lvl + 1);\n            } else {\n                result += padding + key;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Enabling iterating through all the focusers.\n     */\n    public [Symbol.iterator] = function*(this: TabRegistry<E>): IterableIterator<FocuserType<E>> {\n        if (this.isEmpty) {\n            return;\n        }\n\n        let key: E | null = this.firstKey;\n        while (key) {\n            if (key instanceof TabRegistry) {\n                yield* Array.from(key);\n            } else {\n                yield this.focuserMap.get(key) as FocuserType<E>;\n            }\n            key = this.getNextKey(key);\n        }\n    };\n\n    /**\n     * Add a `focuser` to the registry referenced by `key`.\n     */\n    public add(key: E, focuser: FocuserType<E>): void {\n        this.registry.add(key);\n        this.focuserMap.set(key, focuser);\n        if (focuser instanceof TabRegistry) {\n            focuser.setParentRegistry(key, this);\n        }\n    }\n\n    /**\n     * Add a `focuser` to the registry after the `afterKey`\n     * referenced by `key`.\n     */\n    public addAfter(key: E, focuser: FocuserType<E>, afterKey: E): void {\n        this.registry.addAfter(key, afterKey);\n        this.focuserMap.set(key, focuser);\n        if (focuser instanceof TabRegistry) {\n            focuser.setParentRegistry(key, this);\n        }\n    }\n\n    /**\n     * Add a `focuser` to the registry before the `beforeKey`\n     * referenced by `key`.\n     */\n    public addBefore(key: E, focuser: FocuserType<E>, beforeKey: E): void {\n        this.registry.addBefore(key, beforeKey);\n        this.focuserMap.set(key, focuser);\n        if (focuser instanceof TabRegistry) {\n            focuser.setParentRegistry(key, this);\n        }\n    }\n\n    /**\n     * Delete `key` from the registry.\n     */\n    // tslint:disable-next-line:no-reserved-keywords\n    public delete(key: E): void {\n        this.registry.delete(key);\n        this.focuserMap.delete(key);\n    }\n\n    /**\n     * Disable tab cycling.\n     */\n    public disableCycle() {\n        this.cycle = false;\n        return this;\n    }\n\n    /**\n     * Enable tab cycling.\n     */\n    public enableCycle() {\n        this.cycle = true;\n        return this;\n    }\n    /**\n     * Execute focuser for `key`.\n     * Returns `true` if the focuser was successful.\n     * Returns `false` if the focuser does not exist.\n     */\n    public focus(key?: E, options?: FocuserOptions): boolean {\n        const opts = options || focusOriginNone;\n        if (this.focusParentOnChildOrigin && opts.focusOrigin === 'child') {\n            return this.focusParent();\n        }\n\n        let internalKey: E | undefined | null = key;\n        if (internalKey == null) {\n            if (options != null && options.focusOrigin === 'next' && !options.focusFirstOnNextOrigin) {\n                internalKey = this.lastKey;\n            } else {\n                internalKey = this.firstKey;\n            }\n            if (internalKey == null) {\n                return false;\n            }\n        }\n\n        const focuser = this.focuserMap.get(internalKey);\n        if (focuser == null) {\n            return false;\n        }\n\n        return focuser instanceof TabRegistry\n            ? focuser.focus(undefined, { ...opts, focusFirstOnNextOrigin: focuser.focusFirstOnNextOrigin })\n            : focuser(opts);\n    }\n\n    /**\n     * Execute first focuser in the registry.\n     * If the first entry is not focusable recursive through\n     * the registry until a focuser returns `true`.\n     *\n     * Returns `true` if a focuser is successful.\n     * Returns `false` if no focuser was sucessful.\n     */\n    public focusFirst(): boolean {\n        if (this.registry.isEmpty) {\n            return false;\n        }\n\n        const first = this.registry.first;\n        const focuser = this.focuserMap.get(first);\n        if (focuser == null) {\n            return false;\n        }\n\n        const result = focuser instanceof TabRegistry ? focuser.focusFirst() : focuser(focusOriginPrev);\n        if (result) {\n            return true;\n        } else {\n            if (this.cycle && this.focusCycleStartKey == null) {\n                this.focusCycleStartKey = first;\n            }\n            return this.focusNext(first);\n        }\n    }\n\n    /**\n     * Excute focuser that matches the `keys` path\n     * from the first key in the registry.\n     */\n    public focusFirstIn(keys: E[]): boolean {\n        if (this.registry.isEmpty) {\n            return false;\n        }\n        const first = this.registry.first;\n        if (first == null) {\n            return false;\n        }\n\n        return this.focusIn([first, ...keys], focusOriginPrev);\n    }\n\n    /**\n     * Execute focuser that matchs the `keys` path\n     * the first key will be the root identifier.\n     */\n    public focusIn(keys: E[], options?: FocuserOptions): boolean {\n        let key = keys.shift();\n        if (key == null) {\n            return false;\n        }\n        let registry: TabRegistry<E> = this;\n        while (registry.has(key)) {\n            const focuser = registry.get(key);\n            if (focuser == null) {\n                return false;\n            }\n\n            const k = keys.shift();\n            if (k != null) {\n                key = k;\n                if (focuser instanceof TabRegistry) {\n                    registry = focuser;\n                } else {\n                    return false;\n                }\n            } else {\n                if (focuser instanceof TabRegistry) {\n                    return focuser.focus(undefined, options);\n                } else {\n                    if (options == null) {\n                        return focuser(focusOriginNone);\n                    } else {\n                        return focuser(options);\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Execute last focuser in the registry.\n     * If the last entry is not focusable recursive backwards through\n     * the registry until a focuser returns `true`.\n     *\n     * Returns `true` if a focuser is successful.\n     * Returns `false` if no focuser was sucessful.\n     */\n    public focusLast(): boolean {\n        if (this.registry.isEmpty) {\n            return false;\n        }\n\n        const last = this.registry.last;\n        const focuser = this.focuserMap.get(last);\n        if (focuser == null) {\n            return false;\n        }\n\n        const result = focuser instanceof TabRegistry ? focuser.focusLast() : focuser(focusOriginNext);\n\n        if (result) {\n            return true;\n        } else {\n            if (this.cycle && this.focusCycleStartKey == null) {\n                this.focusCycleStartKey = last;\n            }\n            return this.focusPrev(last);\n        }\n    }\n\n    /**\n     * Excute focuser that matches the `keys` path\n     * from the last key in the registry.\n     */\n    public focusLastIn(keys: E[]): boolean {\n        if (this.registry.isEmpty) {\n            return false;\n        }\n        const last = this.registry.last;\n        if (last == null) {\n            return false;\n        }\n        return this.focusIn([last, ...keys], focusOriginNext);\n    }\n\n    /**\n     * Execute the focuser after `key`.\n     * If the focuser was not successful recurse through\n     * the registry until a focuser returns `true`.\n     *\n     * Returns `true` if a focuser is successful.\n     * Returns `false` if no focuser was sucessful.\n     */\n    public focusNext(key: E): boolean {\n        // remember to unset the focusCycleStartKey\n        // for every return path of this function\n        // if cycly is enabled.\n        let focuser;\n        let current;\n        let next = this.getNextKey(key);\n        const totalCount = this.registry.size;\n\n        for (let i = totalCount; i > 0; i--) {\n            if (next == null) {\n                break;\n            }\n\n            current = next;\n            focuser = this.focuserMap.get(current);\n            next = this.getNextKey(current);\n\n            if (focuser == null) {\n                continue;\n            }\n\n            const result = focuser instanceof TabRegistry ? focuser.focusFirst() : focuser(focusOriginPrev);\n\n            if (result) {\n                this.focusCycleStartKey = null;\n                return true;\n            }\n\n            // stop cycling if we have seen the key before.\n            if (this.cycle && current === this.focusCycleStartKey) {\n                this.focusCycleStartKey = null;\n                return false;\n            }\n        }\n\n        if (this.cycle) {\n            // if no cycle start key has been set before\n            // then set it to the key this focusNext loop was started with.\n            if (this.focusCycleStartKey == null) {\n                this.focusCycleStartKey = key;\n\n                // if the focus cycle start key is the same as\n                // the key we started this loop with\n            } else if (this.focusCycleStartKey === key) {\n                this.focusCycleStartKey = null;\n                return false;\n            }\n            return this.focusFirst();\n        }\n\n        if (this.internalParentRegistry != null) {\n            this.focusCycleStartKey = null;\n            this.internalParentRegistry.focusNext(this.parentRegistryKey);\n            return true;\n        }\n\n        this.focusCycleStartKey = null;\n        return false;\n    }\n\n    /**\n     * Excute focuser that matches the `keys` path\n     * from the key after the first key in `keys`.\n     */\n    public focusNextIn(keys: E[]): boolean {\n        const key = keys.shift();\n        if (key == null) {\n            return false;\n        }\n        const next = this.getNextKey(key);\n        if (next == null) {\n            return false;\n        }\n        return this.focusIn([next, ...keys], focusOriginPrev);\n    }\n\n    /**\n     * Focus the parent registry.\n     */\n    public focusParent(): boolean {\n        if (this.internalParentRegistry != null) {\n            return this.internalParentRegistry.focus(undefined, focusOriginChild);\n        }\n        return false;\n    }\n\n    /**\n     * Execute the focuser before `key`.\n     * If the focuser was not successful recurse backwards through\n     * the registry until a focuser returns `true`.\n     *\n     * Returns `true` if a focuser is successful.\n     * Returns `false` if no focuser was sucessful.\n     */\n    public focusPrev(key: E): boolean {\n        // remember to unset the focusCycleStartKey\n        // for every return path of this function\n        // if cycly is enabled.\n        let focuser;\n        let current;\n        let prev = this.getPrevKey(key);\n        const totalCount = this.registry.size;\n\n        for (let i = totalCount; i > 0; i--) {\n            if (prev == null) {\n                break;\n            }\n\n            current = prev;\n            focuser = this.focuserMap.get(prev);\n            prev = this.getPrevKey(prev);\n\n            if (focuser == null) {\n                continue;\n            }\n\n            const result = focuser instanceof TabRegistry ? focuser.focusLast() : focuser(focusOriginNext);\n\n            if (result) {\n                this.focusCycleStartKey = null;\n                return true;\n            }\n\n            // stop cycling if we have seen the key before.\n            if (this.cycle && current === this.focusCycleStartKey) {\n                this.focusCycleStartKey = null;\n                return false;\n            }\n        }\n\n        if (this.cycle) {\n            // if no cycle start key has been set before\n            // then set it to the key this focusPrev loop was started with.\n            if (this.focusCycleStartKey == null) {\n                this.focusCycleStartKey = key;\n\n                // if the focus cycle start key is the same as\n                // the key we started this loop with\n            } else if (this.focusCycleStartKey === key) {\n                this.focusCycleStartKey = null;\n                return false;\n            }\n            return this.focusLast();\n        }\n\n        if (this.internalParentRegistry != null) {\n            this.focusCycleStartKey = null;\n            this.internalParentRegistry.focusPrev(this.parentRegistryKey);\n            return true;\n        }\n\n        this.focusCycleStartKey = null;\n        return false;\n    }\n\n    /**\n     * Excute focuser that matches the `keys` path\n     * from the key before the first key in `keys`.\n     */\n    public focusPrevIn(keys: E[]): boolean {\n        const key = keys.shift();\n        if (key == null) {\n            return false;\n        }\n        const prev = this.getPrevKey(key);\n        if (prev == null) {\n            return false;\n        }\n        return this.focusIn([prev, ...keys], focusOriginNext);\n    }\n\n    /**\n     * Returns focuser for `key` if it exists\n     * otherwise return `null`.\n     */\n    // tslint:disable-next-line:no-reserved-keywords\n    public get(key: E): FocuserType<E> | null {\n        const focuser = this.focuserMap.get(key);\n        if (focuser == null) {\n            return null;\n        } else {\n            return focuser;\n        }\n    }\n\n    /**\n     * Returns the forcuser after `key` if it exists\n     * otherwise return `null`.\n     */\n    public getNext(key: E): FocuserType<E> | null {\n        const next = this.getNextKey(key);\n        if (next == null) {\n            return null;\n        }\n        const focuser = this.focuserMap.get(next);\n        if (focuser == null) {\n            return null;\n        }\n        return focuser;\n    }\n\n    /**\n     * Returns the key next to the key parameter.\n     */\n    public getNextKey(key: E): E | null {\n        return this.registry.next(key);\n    }\n\n    /**\n     * Returns the forcuser before `key` if it exists\n     * otherwise return `null`.\n     */\n    public getPrev(key: E): FocuserType<E> | null {\n        const prev = this.getPrevKey(key);\n        if (prev == null) {\n            return null;\n        }\n        const focuser = this.focuserMap.get(prev);\n        if (focuser == null) {\n            return null;\n        }\n        return focuser;\n    }\n\n    /**\n     * Returns the key previous to the key parameter.\n     */\n    public getPrevKey(key: E): E | null {\n        return this.registry.prev(key);\n    }\n\n    /**\n     * Returns whether or not the focuser for `key` exists.\n     */\n    public has(key: E): boolean {\n        return this.focuserMap.has(key);\n    }\n\n    /**\n     * Test if nested focuser that matchs the `keys` path\n     * from the first key exist.\n     */\n    public hasIn(keys: E[]): boolean {\n        let key = keys.shift();\n        if (key == null) {\n            return false;\n        }\n        let registry: TabRegistry<E> = this;\n        while (registry.has(key)) {\n            const focuser = registry.get(key);\n            if (focuser == null) {\n                return false;\n            }\n\n            const k = keys.shift();\n            if (k != null) {\n                key = k;\n                if (focuser instanceof TabRegistry) {\n                    registry = focuser;\n                } else {\n                    return false;\n                }\n            } else {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether or not there exists a focuser after `key`.\n     */\n    public hasNext(key: E): boolean {\n        if (!this.registry.has(key)) {\n            return false;\n        }\n        return this.getNextKey(key) != null;\n    }\n\n    /**\n     * Returns whether or not there exists a focuser prev `key`.\n     */\n    public hasPrev(key: E): boolean {\n        if (!this.registry.has(key)) {\n            return false;\n        }\n        return this.getPrevKey(key) != null;\n    }\n\n    /**\n     * Returns an iterator of all the `keys` in this registry.\n     */\n    public keys = function*(this: TabRegistry<E>): IterableIterator<E> {\n        if (this.registry.isEmpty) {\n            return;\n        }\n\n        let key: E | null = this.registry.first;\n        while (key) {\n            yield key;\n            key = this.getNextKey(key);\n        }\n    };\n\n    /**\n     * Returns an iterator of all the `keys` in this\n     * and all nested registries.\n     */\n    public keysRecursive = function*(this: TabRegistry<E>): IterableIterator<E> {\n        if (this.registry.isEmpty) {\n            return;\n        }\n\n        let key: E | null = this.registry.first;\n        while (key) {\n            const focuser = this.focuserMap.get(key);\n            if (focuser instanceof TabRegistry) {\n                yield* Array.from(focuser.keysRecursive());\n            } else {\n                yield key;\n            }\n            key = this.getNextKey(key);\n        }\n    };\n\n    /**\n     * Move a focuser to the next spot in the registry.\n     */\n    public moveNext(key: E): void {\n        const focuser = this.focuserMap.get(key);\n        if (focuser == null) {\n            throw new Error(`Focuser for ${key} was not found`);\n        }\n        const next = this.getNextKey(key);\n        if (next != null) {\n            this.registry.setAfter(key, next);\n        }\n    }\n\n    /**\n     * Move a focuser to the previous spot in the registry.\n     */\n    public movePrev(key: E): void {\n        const focuser = this.focuserMap.get(key);\n        if (focuser == null) {\n            throw new Error(`Focuser for ${key} was not found`);\n        }\n        const prev = this.getPrevKey(key);\n        if (prev != null) {\n            this.registry.setBefore(key, prev);\n        }\n    }\n\n    /**\n     * Overwrite focuser for `key`.\n     * It throws if `key` does not exist.\n     */\n    // tslint:disable-next-line:no-reserved-keywords\n    public set(key: E, focuser: FocuserType<E>) {\n        const existingFocuser = this.focuserMap.get(key);\n        if (existingFocuser == null) {\n            throw new Error(`Key does not exist: ${key}`);\n        } else {\n            this.focuserMap.set(key, focuser);\n        }\n    }\n\n    /**\n     * Set the `key` of this registry from\n     * the `parentRegistry`.\n     */\n    public setParentRegistry(parentRegistryKey: any, parentRegistry: TabRegistry<E>) {\n        this.internalParentRegistry = parentRegistry;\n        this.parentRegistryKey = parentRegistryKey;\n    }\n\n    /**\n     * Returns a string representation of this\n     * and all nested registries.\n     */\n    public toString() {\n        return 'TabRegistry[\\n' + this._toString(this.registry, '    ') + '\\n' + ']';\n    }\n}\ntry {\n    // @ts-ignore\n    TabRegistry.displayName = \"TabRegistry\";\n    // @ts-ignore\n    TabRegistry.__docgenInfo = { \"description\": \"Library class for controlling complex nested linked structures.\", \"displayName\": \"TabRegistry\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/TabRegistry.ts#TabRegistry\"] = { docgenInfo: TabRegistry.__docgenInfo, name: \"TabRegistry\", path: \"src/TabRegistry.ts#TabRegistry\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}